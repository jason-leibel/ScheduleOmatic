/*!
 * vue-gapi v1.1.0
 * (c) 2021 CedricPoilly
 * Released under the MIT License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function getObjectCopy(object) {
  return JSON.parse(JSON.stringify(object))
}

function loadGapiScript() {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.src = 'https://apis.google.com/js/api.js';
    script.onreadystatechange = script.onload = function () {
      var interval = setInterval(function () {
        if (!script.readyState || /loaded|complete/.test(script.readyState)) {
          clearInterval(interval);
          if (window.gapi) {
            resolve(window.gapi);
          } else {
            reject();
          }
        }
      }, 100);
    };
    script.onerror = function (message, url, line, column, error) {
      reject({ message: message, url: url, line: line, column: column, error: error });
    };
    document.getElementsByTagName('head')[0].appendChild(script);
  })
}

var GapiClientProvider = function GapiClientProvider(clientConfig) {
  this.clientConfig = getObjectCopy(clientConfig);
  this.promise = null;
  this.client = null;
};

GapiClientProvider.prototype.getClientConfig = function getClientConfig () {
  return this.clientConfig
};

GapiClientProvider.prototype.getClient = function getClient () {
    var this$1 = this;

  if (null !== this.client) {
    return Promise.resolve(this.client)
  }

  if (null === this.promise) {
    this.promise = loadGapiScript().then(function (gapi) {
      return new Promise(function (resolve, reject) {
        gapi.load('client:auth2', function () {
          gapi.client.init(this$1.clientConfig).then(function () {
            this$1.client = {
              gapi: gapi,
              authInstance: gapi.auth2.getAuthInstance(),
            };
            resolve(this$1.client);
          }, reject);
        });
      })
    });
  }

  return this.promise
};

function sessionFromCurrentUser(currentUser) {
  var session = sessionFromAuthResponse(currentUser.getAuthResponse(true));
  var profile = currentUser.getBasicProfile();

  if (profile) {
    session.id = profile.getId();
    session.fullName = profile.getName();
    session.firstName = profile.getGivenName();
    session.lastName = profile.getFamilyName();
    session.email = profile.getEmail();
    session.imageUrl = profile.getImageUrl();
  }

  return session
}

function sessionFromAuthResponse(authResponse) {
  return {
    accessToken: authResponse.access_token,
    idToken: authResponse.id_token,
    expiresAt: expiresAt(authResponse),
  }
}

/**
 * Return the expiration time of the user's auth session.
 *
 * @private
 * @param {object} authResponse gapi.auth2.AuthResponse object
 *
 * @return {number}
 */
function expiresAt(authResponse) {
  return authResponse.expires_in * 1000 + Date.now()
}

/**
 * Google API Client.
 *
 * @typedef GoogleAuthService#gapi
 * @see {@link https://github.com/google/google-api-javascript-client}
 */

/**
 * Singleton class that provides methods to allow the user to sign in with a
 * Google account, get the user's current sign-in status, get specific data
 * from the user's Google profile, request additional scopes, and sign out
 * from the current account.
 *
 * @typedef GoogleAuthService#GoogleAuth
 * @see {@link https://developers.google.com/identity/sign-in/web/reference#authentication}
 */

/**
 * Object that represents the current user.
 *
 * @typedef GoogleAuthService#GoogleUser
 * @see {@link https://developers.google.com/identity/sign-in/web/reference#googleusergetid}
 */

/**
 * Exposed as a <code>$gapi</code> member of the {@link Vue} instance.
 *
 * @class GoogleAuthService
 */
var GoogleAuthService = function GoogleAuthService(clientProvider, sessionStorage) {
  this.clientProvider = clientProvider;
  this.sessionStorage = sessionStorage;
};

/**
 * Returns an initialized {@link GoogleAuthService#gapi} client.
 *
 * @method GoogleAuthService#getGapiClient
 * @see {@link https://github.com/google/google-api-javascript-client/blob/master/docs/start.md}
 *
 * @return {Promise<GoogleAuthService#gapi>}
 */
GoogleAuthService.prototype.getGapiClient = function getGapiClient () {
  return this.clientProvider.getClient().then(function (ref) {
      var gapi = ref.gapi;

      return gapi;
    })
};

/**
 * Returns the {@link GoogleAuthService#GoogleAuth} object.
 *
 * @method GoogleAuthService#getAuthInstance
 * @see [gapi.auth2.getAuthInstance]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2getauthinstance}
 * @since 1.0.0
 *
 * @return {Promise<GoogleAuthService#GoogleAuth>}
 */
GoogleAuthService.prototype.getAuthInstance = function getAuthInstance () {
  return this.clientProvider
    .getClient()
    .then(function (ref) {
        var authInstance = ref.authInstance;

        return authInstance;
    })
};

/**
 * Returns a {@link GoogleAuthService#GoogleUser} object that represents the current user.
 *
 * @method GoogleAuthService#getCurrentUser
 * @see [GoogleAuth.currentUser.get]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthcurrentuserget}
 * @since 1.0.0
 *
 * @return {Promise<GoogleAuthService#GoogleUser>}
 */
GoogleAuthService.prototype.getCurrentUser = function getCurrentUser () {
  return this.getAuthInstance().then(function (authInstance) {
    return authInstance.currentUser.get()
  })
};

/**
 * Returns the authorization code set via {@link GoogleAuthService#grantOfflineAccess}.
 *
 * @method GoogleAuthService#getOfflineAccessCode
 *
 * @return {string|null}
 */
GoogleAuthService.prototype.getOfflineAccessCode = function getOfflineAccessCode () {
  return this.sessionStorage.getItem('offlineAccessCode')
};

/**
 * Get permission from the user to access the specified scopes offline.
 *
 * @method GoogleAuthService#grantOfflineAccess
 * @see [GoogleAuth.grantOfflineAccess]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions}
 *
 * @return {Promise<string>} authorization code
 */
GoogleAuthService.prototype.grantOfflineAccess = function grantOfflineAccess () {
    var this$1 = this;

  return this.getAuthInstance()
    .grantOfflineAccess()
    .then(function (ref) {
        var code = ref.code;

      this$1.sessionStorage.setItem('offlineAccessCode', code);

      return code
    })
};

/**
 * Check if requested scopes were granted or not.
 *
 * @private
 * @method GoogleAuthService#hasGrantedRequestedScopes
 * @param {GoogleAuthService#GoogleUser} currentUser
 *
 * @return {boolean}
 */
GoogleAuthService.prototype.hasGrantedRequestedScopes = function hasGrantedRequestedScopes (currentUser) {
  var ref = this.clientProvider.getClientConfig();
    var scope = ref.scope;

  return scope ? currentUser.hasGrantedScopes(scope) : true
};

/**
 * @typedef GoogleAuthService#LoginOptions
 * @property {boolean} [grantOfflineAccess=false] Additionally gets permission from the user to access the specified scopes offline via {@link GoogleAuthService#getOfflineAccessCode}
 */

/**
 * @typedef GoogleAuthService#LoginResponse
 * @property {boolean} hasGrantedScopes True if the requested scopes were granted.
 * @property {GoogleAuthService#GoogleUser} currentUser Current user
 * @property {string} [code] Authorization code if <code>grantOfflineAccess: true</code>
 */

/**
 * Signs in the user and initializes session.
 *
 * @method GoogleAuthService#login
 * @see [GoogleAuth.signIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignin}
 *
 * @param {GoogleAuthService#LoginOptions} [options]
 *
 * @return {Promise<GoogleAuthService#LoginResponse>}
 *
 * @example
 * <script>
 * export default {
 *   name: 'login-shortcut',
 *
 *   methods: {
 *     login() {
 *       this.$gapi.login({ grantOfflineAccess: true })
 *     },
 *   },
 * }
 * </script>
 */
GoogleAuthService.prototype.login = function login (ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var grantOfflineAccess = ref.grantOfflineAccess; if ( grantOfflineAccess === void 0 ) grantOfflineAccess = false;

  return this.getAuthInstance()
    .then(function (authInstance) {
      return authInstance.signIn().then(function (currentUser) {
        this$1.sessionStorage.set(sessionFromCurrentUser(currentUser));

        return {
          currentUser: currentUser,
          hasGrantedScopes: this$1.hasGrantedRequestedScopes(currentUser),
        }
      })
    })
    .then(function (response) {
      if (grantOfflineAccess) {
        return this$1.grantOfflineAccess().then(function (code) { return (Object.assign({}, response,
          {code: code})); })
      }

      return response
    })
};

/**
 * Forces a refresh of the access token.
 *
 * This should be placed in your App.vue on the created page and run on a timer of 45min.
 *
 * @method GoogleAuthService#refreshToken
 * @see [GoogleUser.reloadAuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserreloadauthresponse}
 *
 * @return {Promise<AuthResponse>}
 *
 * @example
 * <script>
 *   name: 'App'
 *
 *   created () {
 *   try {
 *     // NOTE: 45min refresh policy is what google recommends
 *     window.setInterval(this.$gapi.refreshToken(), 2.7e+6)
 *   } catch (e) {
 *     console.error(e)
 *   }
 *
 * }
 * </script>
 */
GoogleAuthService.prototype.refreshToken = function refreshToken () {
    var this$1 = this;

  return this.getCurrentUser()
    .then(function (currentUser) { return currentUser.reloadAuthResponse(); })
    .then(function (authResponse) {
      this$1.sessionStorage.set(Object.assign({}, this$1.sessionStorage.get(),
        sessionFromAuthResponse(authResponse)));

      return authResponse
    })
};

/**
 * Ask to grant scopes from user.
 *
 * @method GoogleAuthService#grant
 * @see [GoogleUser.grant]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergrantoptions}
 * @since 0.4.0
 *
 * @return {Promise<GoogleAuthService#GoogleUser>}
 *
 * @example
 * <script>
 * export default {
 *   name: 'grant-scope',
 *
 *   methods: {
 *     grant() {
 *       return this.$gapi.grant()
 *     },
 *   },
 * }
 * </script>
 */
GoogleAuthService.prototype.grant = function grant () {
    var this$1 = this;

  return this.getCurrentUser().then(function (currentUser) {
    if (this$1.hasGrantedRequestedScopes(currentUser)) {
      return currentUser
    }

    var ref = this$1.clientProvider.getClientConfig();
      var scope = ref.scope;

    return currentUser.grant({ scope: scope }).then(function () { return currentUser; })
  })
};

/**
 * Signs out the current account from the application and clear session storage.
 *
 * @method GoogleAuthService#logout
 * @see [GoogleAuth.signOut]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignout}
 *
 * @return {Promise}
 *
 * @example
 * <script>
 * export default {
 *   name: 'logout-shortcut',
 *
 *   methods: {
 *     login() {
 *       this.$gapi.logout()
 *     },
 *   },
 * }
 * </script>
 */
GoogleAuthService.prototype.logout = function logout () {
    var this$1 = this;

  return this.getAuthInstance()
    .then(function (authInstance) { return authInstance.signOut(); })
    .then(function () { return this$1.sessionStorage.clear(); })
};

/**
 * Determines if the user is signed in via local storage.
 *
 * @method GoogleAuthService#isAuthenticated
 * @since 0.0.10
 * @return {boolean}
 *
 * @example
 * <script>
 * export default {
 *   name: 'login-shortcut-check',
 *
 *   methods: {
 *     login() {
 *       if (this.$gapi.isAuthenticated() !== true) {
 *         this.$gapi.login()
 *       }
 *     },
 *   },
 * }
 * </script>
 */
GoogleAuthService.prototype.isAuthenticated = function isAuthenticated () {
  return new Date().getTime() < this.sessionStorage.getItem('expiresAt')
};

/**
 * Determines if the user is signed in via Google.
 *
 * @method GoogleAuthService#isSignedIn
 * @see [GoogleUser.isSignedIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserissignedin}
 * @since 0.0.10
 *
 * @return {Promise<boolean>}
 */
GoogleAuthService.prototype.isSignedIn = function isSignedIn () {
  return this.getCurrentUser().then(function (currentUser) { return currentUser.isSignedIn(); })
};

/**
 * Accept the callback to be notified when the authentication status changes.
 *
 * @method GoogleAuthService#listenUserSignIn
 * @see [GoogleAuth.isSignedIn.listen]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthissignedinlistenlistener}
 * @since 0.0.10
 *
 * @param {function} callback
 * the callback function to be notified of an authentication status change
 *
 * @return {Promise<void>}
 */
GoogleAuthService.prototype.listenUserSignIn = function listenUserSignIn (callback) {
  return this.getAuthInstance().then(function (authInstance) {
    callback(authInstance.currentUser.get().isSignedIn());
    authInstance.isSignedIn.listen(callback);
  })
};

/**
 * @typedef {object} GoogleAuthService#UserData
 *
 * @see [gapi.auth2.AuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2authresponse}
 * @see [GoogleUser.getBasicProfile]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergetbasicprofile}
 *
 * @property {string} id user's unique ID string
 * @property {string} firstName given name
 * @property {string} lastName family name
 * @property {string} fullName full name
 * @property {string} email
 * @property {string} imageUrl
 * @property {number} expiresAt
 * @property {string} accessToken granted access token
 * @property {string} idToken granted ID token
 * @property {string} [offlineAccessCode]
 */

/**
 * Gets the user data from local storage
 *
 * @method GoogleAuthService#getUserData
 * @since 0.0.10
 *
 * @return {GoogleAuthService#UserData|null}
 */
GoogleAuthService.prototype.getUserData = function getUserData () {
  return this.sessionStorage.get()
};

var LOCAL_STORAGE_KEY = 'gapi.session';

var SessionStorage = function SessionStorage(localStorage) {
  if ( localStorage === void 0 ) localStorage = window.localStorage;

  this.localStorage = localStorage;
};

SessionStorage.prototype.set = function set (session) {
  this.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(session));
};

SessionStorage.prototype.setItem = function setItem (key, value) {
  var session = this.get() || {};
  session[key] = value;
  this.set(session);
};

SessionStorage.prototype.get = function get () {
  return JSON.parse(this.localStorage.getItem(LOCAL_STORAGE_KEY))
};

SessionStorage.prototype.getItem = function getItem (key) {
  var session = this.get() || {};

  return session[key]
};

SessionStorage.prototype.clear = function clear () {
  this.localStorage.removeItem(LOCAL_STORAGE_KEY);
};

/**
 * @class Vue
 */

/** @module vue-gapi */

/**
 * <code>gapi.client.init</code> configuration parameters.
 *
 * @typedef {object} Options
 * @static
 * @see [gapi.client.init]{@link https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientinitargs--}
 *
 * @property {string} [apiKey] The API Key to use
 * @property {string[]} [discoveryDocs] An array of discovery doc URLs or discovery doc JSON objects
 * @property {string} [clientId] The app's client ID, found and created in the Google Developers Console
 * @property {string} [scope] The scopes to request, as a space-delimited string
 */

var index = {
  /**
   * @param {Vue} Vue Vue constructor
   * @param {module:vue-gapi.Options} clientConfig VueGapi plugin options
   * @see [Using a Plugin]{@link https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin}
   */
  install: function (Vue, clientConfig) {
    var clientProvider = new GapiClientProvider(clientConfig);
    var sessionStorage = new SessionStorage();

    /**
     * @memberof Vue
     * @member {GoogleAuthService}
     *
     * @example
     * <script>
     *   export default {
     *     name: 'my-component',
     *
     *     methods: {
     *       login() {
     *         this.$gapi.getGapiClient().then((gapi) => {
     *           // gapi.sheets.spreadsheet.get(...)
     *           // ...
     *         })
     *       },
     *     },
     *   }
     * </script>
     */
    Vue.prototype.$gapi = new GoogleAuthService(clientProvider, sessionStorage);
  },
};

var version = '1.1.0';

exports.default = index;
exports.version = version;
