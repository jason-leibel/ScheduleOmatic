{"remainingRequest":"/Users/jason/Desktop/GmailPIDTool/node_modules/thread-loader/dist/cjs.js!/Users/jason/Desktop/GmailPIDTool/node_modules/babel-loader/lib/index.js!/Users/jason/Desktop/GmailPIDTool/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jason/Desktop/GmailPIDTool/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jason/Desktop/GmailPIDTool/src/components/AddPidFilter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jason/Desktop/GmailPIDTool/src/components/AddPidFilter.vue","mtime":1614811240313},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/jason/Desktop/GmailPIDTool/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport axios from \"axios\";\nimport VueSimpleSuggest from 'vue-simple-suggest';\nimport 'vue-simple-suggest/dist/styles.css';\nexport default {\n  name: \"AddPidFilter\",\n  components: {\n    VueSimpleSuggest: VueSimpleSuggest\n  },\n  data: function data() {\n    return {\n      labels: [],\n      labelValue: \"\",\n      pidValue: \"\",\n      emailListValue: \"\",\n      filterList: [],\n      headers: [{\n        text: 'PID',\n        align: 'start',\n        value: 'pid'\n      }, {\n        text: 'Label',\n        value: 'label'\n      }, {\n        text: 'Emails',\n        value: 'email'\n      }]\n    };\n  },\n  props: [\"isSignedIn\", \"authInstance\"],\n  watch: {\n    authInstance: function authInstance(n) {\n      if (n !== null) {\n        axios.get(\"https://gmail.googleapis.com/gmail/v1/users/\".concat(encodeURIComponent(n.currentUser.getBasicProfile().getEmail()), \"/labels\"), {\n          headers: {\n            Authorization: \"Bearer \".concat(n.currentUser.getAuthResponse().access_token),\n            'content-type': 'application/json'\n          }\n        }).then(function (resp) {\n          this.labels = resp.data.labels;\n        }.bind(this)).catch(function (err) {\n          console.log(err);\n        });\n      }\n    }\n  },\n  methods: {\n    generateUniqueID: function generateUniqueID() {\n      // always start with a letter (for DOM friendlyness)\n      var idstr = String.fromCharCode(Math.floor(Math.random() * 25 + 65));\n\n      do {\n        // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n        var ascicode = Math.floor(Math.random() * 42 + 48);\n\n        if (ascicode < 58 || ascicode > 64) {\n          // exclude all chars between : (58) and @ (64)\n          idstr += String.fromCharCode(ascicode);\n        }\n      } while (idstr.length < 32);\n\n      return idstr;\n    },\n    clearList: function clearList() {\n      this.filterList = [];\n    },\n    addToList: function addToList() {\n      if (!this.verify()) return;\n      this.filterList.push({\n        label: this.fetchLabelobject().name,\n        pid: this.pidValue,\n        email: this.emailListValue\n      });\n      this.labelValue = \"\";\n      this.pidValue = \"\";\n      this.emailListValue = \"\";\n      console.log(this.filterList);\n    },\n    addPidFilter: function () {\n      var _addPidFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var label, criteria, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.verify()) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                label = this.fetchLabelobject();\n                criteria = [];\n                criteria.push({\n                  \"query\": \"\".concat(this.pidValue)\n                });\n\n                if (this.emailListValue !== \"\") {\n                  this.emailListValue.split('; ').forEach(function (email) {\n                    criteria.push({\n                      \"to\": \"\".concat(email)\n                    });\n                    criteria.push({\n                      \"from\": \"\".concat(email)\n                    });\n                  });\n                }\n\n                i = 0;\n\n              case 7:\n                if (!(i < criteria.length)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 10;\n                return this.createFilter(label, criteria[i]);\n\n              case 10:\n                i++;\n                _context.next = 7;\n                break;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addPidFilter() {\n        return _addPidFilter.apply(this, arguments);\n      }\n\n      return addPidFilter;\n    }(),\n    verify: function verify() {\n      if (!this.isRealLabel || this.labelValue === '' || this.pidValue === '') {\n        this.sendNotification('Form Not Filled out', 'error', 'Please fix errors in red before trying to create?');\n        return false;\n      }\n\n      if (!this.authInstance) {\n        this.sendNotification('Incorrect Login Details', 'error', 'Doesnt appear you are logged in, perhaps refreshing will fix?');\n        return false;\n      }\n\n      return true;\n    },\n    fetchLabelobject: function fetchLabelobject() {\n      var _this = this;\n\n      var obj = {};\n      this.labels.forEach(function (label) {\n        if (label.name === _this.labelValue) {\n          obj = label;\n        }\n      });\n      return obj;\n    },\n    createFilter: function () {\n      var _createFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(label, criteria) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", axios.post(\"https://gmail.googleapis.com/gmail/v1/users/\".concat(encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail()), \"/settings/filters\"), {\n                  \"id\": this.generateUniqueID().toString(),\n                  criteria: criteria,\n                  \"action\": {\n                    \"addLabelIds\": [\"\".concat(label.id)]\n                  }\n                }, {\n                  headers: {\n                    Authorization: \"Bearer \".concat(this.authInstance.currentUser.getAuthResponse().access_token),\n                    'content-type': 'application/json'\n                  }\n                }).then(function () {\n                  _this2.sendNotification('Success!', 'success', \"Filter created for the following criteria: \".concat(JSON.stringify(criteria)));\n                }).catch(function (err) {\n                  _this2.sendNotification(\"Error code: \".concat(err.response.data.error.code), 'error', \"Message: \".concat(err.response.data.error.message, \" >>> for filter criteria: \").concat(JSON.stringify(criteria)));\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createFilter(_x, _x2) {\n        return _createFilter.apply(this, arguments);\n      }\n\n      return createFilter;\n    }(),\n    sendNotification: function sendNotification(title, type, text) {\n      console.log(\"Notification\");\n      this.$notify({\n        group: 'app',\n        title: title,\n        type: type,\n        duration: 4000,\n        text: text\n      });\n    },\n    downloadFile: function downloadFile() {\n      var fl = this.filterList;\n\n      if (this.filterList.length === 0) {\n        this.sendNotification('Error', 'error', 'Filter list is empty');\n        return;\n      }\n\n      var entries = [];\n\n      var _loop = function _loop(i) {\n        entries.push(\"<entry><category term=\\\"filter\\\"></category><apps:property name='hasTheWord' value='\".concat(fl[i].pid, \"' />\\n                   <apps:property name='label' value='\").concat(fl[i].label, \"'/></entry>\"));\n\n        if (fl[i].email !== \"\") {\n          fl[i].email.split('; ').forEach(function (email) {\n            entries.push(\"<entry><category term=\\\"filter\\\"></category><apps:property name='to' value='\".concat(email, \"' />\\n                   <apps:property name='label' value='\").concat(fl[i].label, \"'/></entry>\"));\n            entries.push(\"<entry><category term=\\\"filter\\\"></category><apps:property name='from' value='\".concat(email, \"' />\\n                   <apps:property name='label' value='\").concat(fl[i].label, \"'/></entry>\"));\n          });\n        }\n      };\n\n      for (var i = 0; i < fl.length; i++) {\n        _loop(i);\n      }\n\n      var filename = \"filters.xml\";\n      var pom = document.createElement('a');\n      var bb = new Blob([\"<?xml version='1.0' encoding='UTF-8'?>\\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:apps='http://schemas.google.com/apps/2006'>\\n\".concat(entries.join(''), \"\\n</feed>\")], {\n        type: 'text/plain'\n      });\n      pom.setAttribute('href', window.URL.createObjectURL(bb));\n      pom.setAttribute('download', filename);\n      pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\n      pom.draggable = true;\n      pom.classList.add('dragout');\n      pom.click();\n      this.sendNotification('Success', 'success', 'File should have been downloaded as XML, please upload this document to your filters and add them or verify they are correct!');\n    }\n  },\n  computed: {\n    labelList: function labelList() {\n      return this.labels.map(function (i) {\n        return i.name;\n      });\n    },\n    isRealLabel: function isRealLabel() {\n      var _this3 = this;\n\n      var exists = false;\n      this.labels.forEach(function (label) {\n        if (label.name === _this3.labelValue) {\n          exists = true;\n        }\n      });\n      return exists;\n    }\n  }\n};",{"version":3,"sources":["AddPidFilter.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <v-card style=\"width: 70%; padding: 20px; margin-left: auto; margin-right: auto; margin-top: 20px\n\">\n      <v-form\n          ref=\"form\"\n          lazy-validation\n      >\n        <label for=\"label\" class=\"AddPidFilter__label\">GMail Label:</label>\n        <vue-simple-suggest\n            id=\"label\"\n            name=\"label\"\n            v-model=\"labelValue\"\n            class=\"AddPidFilter__input-select\"\n            :list=\"labelList\"\n            :max-suggestions=\"0\"\n            :filter-by-query=\"true\">\n          <!-- Filter by input text to only show the matching results -->\n        </vue-simple-suggest>\n        <span v-show=\"labelValue === ''\" class=\"AddPidFilter__error\">* Select or enter a Gmail label for the filter to be applied to.</span>\n        <span v-show=\"!isRealLabel\" class=\"AddPidFilter__error\">* Invalid label selected/entered.</span>\n        <v-text-field\n            v-model=\"pidValue\"\n            label=\"PID\"\n            placeholder=\"ABCD\"\n            :required=\"true\"\n            required\n        ></v-text-field>\n        <span v-show=\"pidValue === ''\" class=\"AddPidFilter__error\">* Must provide PID letters.</span>\n\n        <v-text-field\n            v-model=\"emailListValue\"\n            label=\"Email list\"\n            placeholder=\"email@gmail.com; email2@gmail.com\"\n            required\n        ></v-text-field>\n\n        <v-btn\n            v-if=\"false\"\n            x-large\n            color=\"success\"\n            dark\n            style=\"display: block;\"\n            :disabled=\"!isSignedIn\"\n            @click=\"addPidFilter\">Add PID Filters\n        </v-btn>\n\n        <v-btn\n            x-large\n            dark\n            color=\"primary\"\n            style=\"margin-top: 20px; background-color: #62ae82 !important;\"\n            :disabled=\"!isSignedIn\"\n            @click=\"addToList\">Add filter to List\n        </v-btn>\n        <v-btn\n            x-large\n            dark\n            style=\"margin-start: 20px; margin-top: 20px;  background-color: #ae6265 !important;\"\n            :disabled=\"!isSignedIn\"\n            @click=\"clearList\">Clear Filter List\n        </v-btn>\n        <v-btn\n            x-large\n            dark\n            style=\"margin-start: 20px; margin-top: 20px;  background-color: #6278ae !important;\"\n            :disabled=\"!isSignedIn\"\n            @click=\"downloadFile\">Download (.xml)\n        </v-btn>\n      </v-form>\n      <iframe id=\"my_iframe\" style=\"display:none;\"></iframe>\n      <v-spacer/>\n      <v-data-table\n      :headers=\"headers\"\n      :items=\"filterList\"\n      :items-per-page=\"10\"/>\n    </v-card>\n  </div>\n</template>\n\n<script lang=\"js\">\nimport axios from \"axios\";\nimport VueSimpleSuggest from 'vue-simple-suggest'\nimport 'vue-simple-suggest/dist/styles.css'\n\nexport default {\n  name: \"AddPidFilter\",\n  components: {\n    VueSimpleSuggest\n  },\n  data() {\n    return {\n      labels: [],\n      labelValue: \"\",\n      pidValue: \"\",\n      emailListValue: \"\",\n      filterList: [],\n      headers: [\n        { text: 'PID', align: 'start', value: 'pid' },\n        { text: 'Label', value: 'label' },\n        { text: 'Emails', value: 'email' }\n      ]\n    }\n  },\n  props: [\n    \"isSignedIn\",\n    \"authInstance\"\n  ],\n  watch: {\n    authInstance(n) {\n      if (n !== null) {\n        axios.get(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(n.currentUser.getBasicProfile().getEmail())}/labels`, {\n          headers: {\n            Authorization: `Bearer ${n.currentUser.getAuthResponse().access_token}`,\n            'content-type': 'application/json'\n          }\n        }).then(function(resp) {\n          this.labels = resp.data.labels\n        }.bind(this)).catch(err => {\n          console.log(err)\n        })\n      }\n    }\n  },\n  methods: {\n    generateUniqueID() {\n      // always start with a letter (for DOM friendlyness)\n      var idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n      do {\n        // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n        var ascicode = Math.floor((Math.random() * 42) + 48);\n        if (ascicode < 58 || ascicode > 64) {\n          // exclude all chars between : (58) and @ (64)\n          idstr += String.fromCharCode(ascicode);\n        }\n      } while (idstr.length < 32);\n\n      return (idstr);\n    },\n    clearList() {\n      this.filterList = []\n    },\n    addToList() {\n      if(!this.verify()) return;\n      this.filterList.push({\n        label: this.fetchLabelobject().name,\n        pid: this.pidValue,\n        email: this.emailListValue\n      })\n\n      this.labelValue = \"\"\n      this.pidValue = \"\"\n      this.emailListValue = \"\"\n\n      console.log(this.filterList)\n    },\n    async addPidFilter() {\n      if(!this.verify()) return;\n      const label = this.fetchLabelobject()\n      const criteria = []\n\n      criteria.push({\n        \"query\": `${this.pidValue}`\n      })\n      if (this.emailListValue !== \"\") {\n        this.emailListValue.split('; ').forEach(email => {\n          criteria.push({\n            \"to\": `${email}`\n          })\n          criteria.push({\n            \"from\": `${email}`\n          })\n        })\n      }\n\n      for (let i = 0; i < criteria.length; i++) {\n        await this.createFilter(label, criteria[i])\n      }\n    },\n    verify() {\n      if (!this.isRealLabel || this.labelValue === '' || this.pidValue === '') {\n        this.sendNotification('Form Not Filled out', 'error', 'Please fix errors in red before trying to create?')\n        return false\n      }\n      if (!this.authInstance) {\n        this.sendNotification('Incorrect Login Details', 'error', 'Doesnt appear you are logged in, perhaps refreshing will fix?')\n        return false\n      }\n      return true\n    },\n    fetchLabelobject() {\n      let obj = {}\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          obj = label\n        }\n      })\n      return obj\n    },\n    async createFilter(label, criteria) {\n      return axios.post(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail())}/settings/filters`,\n          {\"id\": this.generateUniqueID().toString(), criteria, \"action\": {\"addLabelIds\": [`${label.id}`]}}, {\n            headers: {\n              Authorization: `Bearer ${this.authInstance.currentUser.getAuthResponse().access_token}`,\n              'content-type': 'application/json'\n            }\n          }).then(() => {\n        this.sendNotification('Success!', 'success', `Filter created for the following criteria: ${JSON.stringify(criteria)}`)\n      }).catch(err => {\n        this.sendNotification(`Error code: ${err.response.data.error.code}`, 'error', `Message: ${err.response.data.error.message} >>> for filter criteria: ${JSON.stringify(criteria)}`)\n      })\n    },\n    sendNotification(title, type, text) {\n      console.log(\"Notification\")\n      this.$notify({\n        group: 'app',\n        title,\n        type,\n        duration: 4000,\n        text\n      });\n    },\n    downloadFile() {\n      const fl = this.filterList\n      if (this.filterList.length === 0) {\n        this.sendNotification('Error', 'error', 'Filter list is empty')\n        return\n      }\n\n      const entries = []\n      for (let i = 0; i < fl.length; i++) {\n        entries.push(`<entry><category term=\"filter\"></category><apps:property name='hasTheWord' value='${fl[i].pid}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n        if (fl[i].email !== \"\") {\n          fl[i].email.split('; ').forEach(email => {\n            entries.push(`<entry><category term=\"filter\"></category><apps:property name='to' value='${email}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n            entries.push(`<entry><category term=\"filter\"></category><apps:property name='from' value='${email}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n          })\n        }\n      }\n\n      let filename = \"filters.xml\";\n      let pom = document.createElement('a');\n      let bb = new Blob([`<?xml version='1.0' encoding='UTF-8'?>\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:apps='http://schemas.google.com/apps/2006'>\n${entries.join('')}\n</feed>`], {type: 'text/plain'});\n\n      pom.setAttribute('href', window.URL.createObjectURL(bb));\n      pom.setAttribute('download', filename);\n\n      pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\n      pom.draggable = true;\n      pom.classList.add('dragout');\n\n      pom.click();\n      this.sendNotification('Success', 'success', 'File should have been downloaded as XML, please upload this document to your filters and add them or verify they are correct!')\n\n    },\n  },\n  computed: {\n    labelList() {\n      return this.labels.map(i => i.name)\n    },\n    isRealLabel() {\n      let exists = false\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          exists = true\n        }\n      })\n\n      return exists\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.AddPidFilter__error {\n  color: red;\n  display: block;\n}\n\n.v-label {\n  right: auto !important;\n  font-size: 30px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}