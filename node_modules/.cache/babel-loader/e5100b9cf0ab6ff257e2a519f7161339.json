{"remainingRequest":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js!/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/administrator/Desktop/scheduleOmatic/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/administrator/Desktop/scheduleOmatic/src/App.vue","mtime":1616883587968},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":1616809256131},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js","mtime":1616809255971},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":1616809256131},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js","mtime":1616809260729}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Navigation from \"./components/NavigationBar.vue\";\nimport AddEmployee from \"./components/AddEmployee.vue\";\nimport EmployeeList from \"./components/EmployeeList.vue\";\nimport UploadEmployeeList from \"./components/UploadEmployeeList.vue\";\nimport 'vuetify/dist/vuetify.css';\nexport default {\n  name: \"app\",\n  components: {\n    Navigation: Navigation,\n    AddEmployee: AddEmployee,\n    EmployeeList: EmployeeList,\n    UploadEmployeeList: UploadEmployeeList\n  },\n  methods: {\n    updateEmployeeList: function updateEmployeeList(employees) {\n      this.employeeList = employees;\n    },\n    addEmployee: function addEmployee(employee) {\n      if (!this.employeeList) {\n        this.employeeList = [];\n      }\n\n      this.employeeList.push(employee);\n    },\n    sendNotification: function sendNotification(title, type, text) {\n      console.log(\"Notification\");\n      this.$notify({\n        group: 'app',\n        title: title,\n        type: type,\n        duration: 6000,\n        text: text\n      });\n    },\n    generateSchedule: function generateSchedule(list) {\n      var postOffice = this.timeObj.departments.filter(function (department) {\n        return department.name === \"Post Office\";\n      })[0];\n      var workersPO = list.filter(function (person) {\n        return person.employeeDepartment === \"Post Office\";\n      });\n      this.scheduleObj = [];\n      var scheduleObj = {};\n      postOffice.timeFrames.forEach(function (tf) {\n        scheduleObj[tf.day] = {};\n        workersPO.forEach(function (wrk) {\n          if (wrk.employeeAvailability[tf.day] !== undefined) {\n            scheduleObj[tf.day][wrk.employeeName] = {};\n            scheduleObj[tf.day][wrk.employeeName].available = true;\n            var empStartTime = wrk.employeeAvailability[tf.day].startTime;\n            var empEndTime = wrk.employeeAvailability[tf.day].endTime; // If the employee is available before or at shift open\n\n            if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n              // schedule employee to work from open eiter until 8 hours or they become unavailable\n              scheduleObj[tf.day][wrk.employeeName].startTime = tf.open;\n              var hoursAvail = empEndTime - empStartTime;\n              scheduleObj[tf.day][wrk.employeeName].endTime = hoursAvail < 8 ? tf.open + hoursAvail : tf.open + 8 > tf.close ? tf.close : tf.open + 8;\n            } else {\n              // schedule employee to work from their time available either until close or 8 hours later\n              scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime;\n\n              var _hoursAvail = empEndTime - empStartTime;\n\n              scheduleObj[tf.day][wrk.employeeName].endTime = _hoursAvail + empStartTime > tf.close ? tf.close : _hoursAvail + empStartTime;\n            }\n          } else {\n            // Employee unavailable that day\n            scheduleObj[tf.day][wrk.employeeName] = {};\n            scheduleObj[tf.day][wrk.employeeName].available = false;\n          }\n        });\n      });\n      this.translateToTable(scheduleObj);\n    },\n    translateToTable: function translateToTable(obj) {\n      var _this = this;\n\n      var result = [];\n      obj = this.filterOutPeople(obj);\n      var days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      this.employeeList.forEach(function (employee) {\n        var temp = {};\n        temp[\"name\"] = employee.employeeName;\n        temp[\"department\"] = employee.employeeDepartment;\n        temp[\"totalTimeThisWeek\"] = 0;\n        temp[\"schedule\"] = {};\n        days.forEach(function (day) {\n          if (obj[day][employee.employeeName] !== undefined) {\n            temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime;\n            temp[\"schedule\"][day] = obj[day][employee.employeeName].available ? _this.doubleToTimeString(obj[day][employee.employeeName].startTime) + \" - \" + _this.doubleToTimeString(obj[day][employee.employeeName].endTime) : \"\";\n          }\n        });\n        result.push(temp);\n      });\n      console.log(result);\n      this.scheduleObj = result;\n    },\n    filterOutPeople: function filterOutPeople(obj) {\n      var _this2 = this;\n\n      var _loop = function _loop(day) {\n        if (obj.hasOwnProperty(day)) {\n          var employees = _this2.jsonObjectsToArray(obj[day]).filter(function (i) {\n            return i.available;\n          });\n\n          var depConst = _this2.timeObj.departments.filter(function (i) {\n            return i.name === \"Post Office\";\n          })[0];\n\n          var timeConst = depConst.timeFrames.filter(function (i) {\n            return i.day === day;\n          })[0];\n\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            var hasStartingEmployee = false;\n            var hasClosingEmployee = false;\n            var keepLooping = true;\n\n            while (keepLooping) {\n              for (var i = 0; i < employees.length; i++) {\n                var employee = employees[i];\n\n                if (employee.startTime === timeConst.open) {\n                  if (hasStartingEmployee) {\n                    employees.splice(i, 1);\n                  }\n\n                  hasStartingEmployee = true;\n                } else if (employee.endTime === timeConst.close) {\n                  if (hasClosingEmployee) {\n                    employees.splice(i, 1);\n                  }\n\n                  hasClosingEmployee = true;\n                } else {\n                  employees.splice(i, 1);\n                }\n\n                if (employees.length <= depConst.requiredEmployeeAtGivenTime) {\n                  keepLooping = false;\n                  break;\n                }\n              }\n            }\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            _this2.sendNotification(\"Warning\", \"warning\", \"Not enough employees available on \".concat(day));\n          }\n\n          obj[day] = _this2.arrayToJsonObjects(employees, day);\n        }\n      };\n\n      for (var day in obj) {\n        _loop(day);\n      }\n\n      return obj;\n    },\n    arrayToJsonObjects: function arrayToJsonObjects(arr, day) {\n      var result = {};\n      arr.forEach(function (item) {\n        result[item.name] = item;\n      });\n      return result;\n    },\n    jsonObjectsToArray: function jsonObjectsToArray(object) {\n      var result = [];\n\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key;\n          result.push(object[key]);\n        }\n      }\n\n      return result;\n    },\n    doubleToTimeString: function doubleToTimeString(str) {\n      var val = parseFloat(str);\n\n      if (val > 12) {\n        val = val - 12;\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" PM\");\n      } else {\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" AM\");\n      }\n    },\n    getMinutesFromDouble: function getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\";\n\n        case 0.5:\n          return \"30\";\n\n        case 0.75:\n          return \"45\";\n\n        default:\n          return \"00\";\n      }\n    }\n  },\n  computed: {\n    liveEmployeeList: function liveEmployeeList() {\n      return this.employeeList;\n    }\n  },\n  data: function data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [{\n        text: 'Employee Name',\n        align: 'start',\n        value: 'name'\n      }, {\n        text: 'Department',\n        value: 'department'\n      }, {\n        text: 'Total Hours',\n        value: 'totalTimeThisWeek'\n      }, {\n        text: 'Sunday',\n        value: 'schedule.sunday'\n      }, {\n        text: 'Monday',\n        value: 'schedule.monday'\n      }, {\n        text: 'Tuesday',\n        value: 'schedule.tuesday'\n      }, {\n        text: 'Wednesday',\n        value: 'schedule.wednesday'\n      }, {\n        text: 'Thursday',\n        value: 'schedule.thursday'\n      }, {\n        text: 'Friday',\n        value: 'schedule.friday'\n      }, {\n        text: 'Saturday',\n        value: 'schedule.saturday'\n      }],\n      employeeList: [{\n        \"employeeName\": \"Lucy Davey\",\n        \"employeeAvailability\": {\n          \"sunday\": {\n            \"startTime\": 12,\n            \"endTime\": 17\n          },\n          \"wednesday\": {\n            \"startTime\": 12,\n            \"endTime\": 17\n          },\n          \"thursday\": {\n            \"startTime\": 12,\n            \"endTime\": 17\n          },\n          \"friday\": {\n            \"startTime\": 12,\n            \"endTime\": 17\n          },\n          \"saturday\": {\n            \"startTime\": 12,\n            \"endTime\": 17\n          },\n          \"totalHoursAvailable\": 25\n        },\n        \"employeeHoursToWork\": \"35\",\n        \"employeeDepartment\": \"Post Office\"\n      }, {\n        \"employeeName\": \"Ivy Davey\",\n        \"employeeAvailability\": {\n          \"sunday\": {\n            \"startTime\": 12,\n            \"endTime\": 22\n          },\n          \"monday\": {\n            \"startTime\": 12,\n            \"endTime\": 22\n          },\n          \"tuesday\": {\n            \"startTime\": 12,\n            \"endTime\": 22\n          },\n          \"wednesday\": {\n            \"startTime\": 12,\n            \"endTime\": 22\n          },\n          \"thursday\": {\n            \"startTime\": 12,\n            \"endTime\": 22\n          },\n          \"totalHoursAvailable\": 50\n        },\n        \"employeeHoursToWork\": \"30\",\n        \"employeeDepartment\": \"Post Office\"\n      }, {\n        \"employeeName\": \"Belle Javey\",\n        \"employeeAvailability\": {\n          \"sunday\": {\n            \"startTime\": 8,\n            \"endTime\": 22\n          },\n          \"monday\": {\n            \"startTime\": 16.5,\n            \"endTime\": 22\n          },\n          \"wednesday\": {\n            \"startTime\": 16.5,\n            \"endTime\": 22\n          },\n          \"thursday\": {\n            \"startTime\": 16.5,\n            \"endTime\": 22\n          },\n          \"friday\": {\n            \"startTime\": 16.5,\n            \"endTime\": 22\n          },\n          \"saturday\": {\n            \"startTime\": 8,\n            \"endTime\": 22\n          },\n          \"totalHoursAvailable\": 50\n        },\n        \"employeeHoursToWork\": \"20\",\n        \"employeeDepartment\": \"Post Office\"\n      }, {\n        \"employeeName\": \"Jason Leibel\",\n        \"employeeAvailability\": {\n          \"monday\": {\n            \"startTime\": 8,\n            \"endTime\": 21.5\n          },\n          \"tuesday\": {\n            \"startTime\": 8,\n            \"endTime\": 21.5\n          },\n          \"wednesday\": {\n            \"startTime\": 8,\n            \"endTime\": 21.5\n          },\n          \"thursday\": {\n            \"startTime\": 8,\n            \"endTime\": 21.5\n          },\n          \"saturday\": {\n            \"startTime\": 8,\n            \"endTime\": 21.5\n          },\n          \"totalHoursAvailable\": 67.5\n        },\n        \"employeeHoursToWork\": \"40\",\n        \"employeeDepartment\": \"Post Office\"\n      }, {\n        \"employeeName\": \"Tyson Leibel\",\n        \"employeeAvailability\": {\n          \"monday\": {\n            \"startTime\": 8.5,\n            \"endTime\": 16\n          },\n          \"tuesday\": {\n            \"startTime\": 8.5,\n            \"endTime\": 16\n          },\n          \"wednesday\": {\n            \"startTime\": 8.5,\n            \"endTime\": 16\n          },\n          \"thursday\": {\n            \"startTime\": 8.5,\n            \"endTime\": 16\n          },\n          \"friday\": {\n            \"startTime\": 8.5,\n            \"endTime\": 16\n          },\n          \"totalHoursAvailable\": 37.5\n        },\n        \"employeeHoursToWork\": \"40\",\n        \"employeeDepartment\": \"Post Office\"\n      }],\n      timeObj: {\n        departments: [{\n          name: \"Post Office\",\n          requiredEmployeeAtGivenTime: 1,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"monday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"tuesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"wednesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"thursday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"friday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"saturday\",\n            open: 9,\n            close: 17.5\n          }]\n        }]\n      }\n    };\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app id=\"app\">\n    <Navigation/>\n    <AddEmployee @addEmployee=\"addEmployee\" @notification=\"sendNotification\"/>\n    <UploadEmployeeList @updateEmployeeList=\"updateEmployeeList\"/>\n    <EmployeeList :employee-list=\"liveEmployeeList\" @generateSchedule=\"generateSchedule\"\n                  @notification=\"sendNotification\"/>\n    <notifications group=\"app\" position=\"bottom left\"/>\n    <v-card\n        class=\"mx-auto\"\n        tile\n        style=\"width: 95%; padding: 1 0px; margin: 20px auto;\"\n    >\n      <v-data-table\n          :headers=\"scheduleHeaders\"\n          :items=\"scheduleObj\"\n          :items-per-page=\"10\"/>\n    </v-card>\n  </v-app>\n</template>\n\n<script>\nimport Navigation from \"./components/NavigationBar.vue\";\nimport AddEmployee from \"./components/AddEmployee.vue\";\nimport EmployeeList from \"./components/EmployeeList.vue\";\nimport UploadEmployeeList from \"./components/UploadEmployeeList.vue\";\n\nimport 'vuetify/dist/vuetify.css'\n\nexport default {\n  name: \"app\",\n  components: {\n    Navigation,\n    AddEmployee,\n    EmployeeList,\n    UploadEmployeeList\n  },\n  methods: {\n    updateEmployeeList(employees) {\n      this.employeeList = employees\n    },\n    addEmployee(employee) {\n      if (!this.employeeList) {\n        this.employeeList = []\n      }\n      this.employeeList.push(employee)\n    },\n    sendNotification(title, type, text) {\n      console.log(\"Notification\")\n      this.$notify({\n        group: 'app',\n        title,\n        type,\n        duration: 6000,\n        text\n      });\n    },\n    generateSchedule(list) {\n      let postOffice = this.timeObj.departments.filter(department => department.name === \"Post Office\")[0]\n      let workersPO = list.filter(person => person.employeeDepartment === \"Post Office\")\n      this.scheduleObj = []\n      let scheduleObj = {}\n\n      postOffice.timeFrames.forEach(tf => {\n        scheduleObj[tf.day] = {}\n        workersPO.forEach(wrk => {\n          if (wrk.employeeAvailability[tf.day] !== undefined) {\n            scheduleObj[tf.day][wrk.employeeName] = {}\n            scheduleObj[tf.day][wrk.employeeName].available = true\n            let empStartTime = wrk.employeeAvailability[tf.day].startTime\n            let empEndTime = wrk.employeeAvailability[tf.day].endTime\n            // If the employee is available before or at shift open\n            if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n              // schedule employee to work from open eiter until 8 hours or they become unavailable\n              scheduleObj[tf.day][wrk.employeeName].startTime = tf.open\n              let hoursAvail = empEndTime - empStartTime\n              scheduleObj[tf.day][wrk.employeeName].endTime = (\n                  hoursAvail < 8\n              ) ? tf.open + hoursAvail : ((tf.open + 8) > tf.close) ? tf.close : tf.open + 8\n\n            } else {\n              // schedule employee to work from their time available either until close or 8 hours later\n              scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime\n              let hoursAvail = empEndTime - empStartTime\n              scheduleObj[tf.day][wrk.employeeName].endTime = ((hoursAvail + empStartTime) > tf.close) ? tf.close :\n                  (hoursAvail + empStartTime)\n            }\n          } else {\n            // Employee unavailable that day\n            scheduleObj[tf.day][wrk.employeeName] = {}\n            scheduleObj[tf.day][wrk.employeeName].available = false\n          }\n        })\n      })\n      this.translateToTable(scheduleObj)\n    },\n    translateToTable(obj) {\n      let result = []\n      obj = this.filterOutPeople(obj)\n      let days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n      this.employeeList.forEach(employee => {\n        let temp = {}\n        temp[\"name\"] = employee.employeeName\n        temp[\"department\"] = employee.employeeDepartment\n        temp[\"totalTimeThisWeek\"] = 0\n        temp[\"schedule\"] = {}\n        days.forEach(day => {\n          if (obj[day][employee.employeeName] !== undefined) {\n            temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime\n            temp[\"schedule\"][day] = (obj[day][employee.employeeName].available) ?\n                this.doubleToTimeString(obj[day][employee.employeeName].startTime) +\n                \" - \" + this.doubleToTimeString(obj[day][employee.employeeName].endTime)\n                : \"\"\n          }\n        })\n        result.push(temp)\n      })\n      console.log(result)\n      this.scheduleObj = result\n    },\n    filterOutPeople(obj) {\n      for (let day in obj) {\n        if (obj.hasOwnProperty(day)) {\n          let employees = this.jsonObjectsToArray(obj[day]).filter(i => i.available)\n          let depConst = this.timeObj.departments.filter(i => i.name === \"Post Office\")[0]\n          let timeConst = depConst.timeFrames.filter(i => i.day === day)[0]\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            let hasStartingEmployee = false\n            let hasClosingEmployee = false\n            let keepLooping = true\n            while (keepLooping) {\n              for (let i = 0; i < employees.length; i++) {\n                let employee = employees[i]\n                if (employee.startTime === timeConst.open) {\n                  if (hasStartingEmployee) {\n                    employees.splice(i, 1)\n                  }\n                  hasStartingEmployee = true\n                } else if (employee.endTime === timeConst.close) {\n                  if (hasClosingEmployee) {\n                    employees.splice(i, 1)\n                  }\n                  hasClosingEmployee = true\n                } else {\n                  employees.splice(i, 1)\n                }\n                if (employees.length <= depConst.requiredEmployeeAtGivenTime) {\n                  keepLooping = false\n                  break\n                }\n              }\n            }\n\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            this.sendNotification(\"Warning\", \"warning\", `Not enough employees available on ${day}`)\n          }\n\n          obj[day] = this.arrayToJsonObjects(employees, day)\n        }\n      }\n      return obj\n    },\n    arrayToJsonObjects(arr, day) {\n      let result = {}\n      arr.forEach(item => {\n        result[item.name] = item\n      })\n      return result\n    },\n    jsonObjectsToArray(object) {\n      let result = []\n      for (let key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key\n          result.push(object[key])\n        }\n      }\n      return result\n    },\n    doubleToTimeString(str) {\n      let val = parseFloat(str)\n      if (val > 12) {\n        val = val - 12\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} PM`\n      } else {\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} AM`\n      }\n    },\n    getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\"\n        case 0.5:\n          return \"30\"\n        case 0.75:\n          return \"45\"\n        default:\n          return \"00\"\n      }\n    }\n  },\n  computed: {\n    liveEmployeeList() {\n      return this.employeeList\n    }\n  },\n  data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [\n        {text: 'Employee Name', align: 'start', value: 'name'},\n        {text: 'Department', value: 'department'},\n        {text: 'Total Hours', value: 'totalTimeThisWeek'},\n        {text: 'Sunday', value: 'schedule.sunday'},\n        {text: 'Monday', value: 'schedule.monday'},\n        {text: 'Tuesday', value: 'schedule.tuesday'},\n        {text: 'Wednesday', value: 'schedule.wednesday'},\n        {text: 'Thursday', value: 'schedule.thursday'},\n        {text: 'Friday', value: 'schedule.friday'},\n        {text: 'Saturday', value: 'schedule.saturday'}\n      ],\n      employeeList: [{\"employeeName\":\"Lucy Davey\",\"employeeAvailability\":{\"sunday\":{\"startTime\":12,\"endTime\":17},\"wednesday\":{\"startTime\":12,\"endTime\":17},\"thursday\":{\"startTime\":12,\"endTime\":17},\"friday\":{\"startTime\":12,\"endTime\":17},\"saturday\":{\"startTime\":12,\"endTime\":17},\"totalHoursAvailable\":25},\"employeeHoursToWork\":\"35\",\"employeeDepartment\":\"Post Office\"},{\"employeeName\":\"Ivy Davey\",\"employeeAvailability\":{\"sunday\":{\"startTime\":12,\"endTime\":22},\"monday\":{\"startTime\":12,\"endTime\":22},\"tuesday\":{\"startTime\":12,\"endTime\":22},\"wednesday\":{\"startTime\":12,\"endTime\":22},\"thursday\":{\"startTime\":12,\"endTime\":22},\"totalHoursAvailable\":50},\"employeeHoursToWork\":\"30\",\"employeeDepartment\":\"Post Office\"},{\"employeeName\":\"Belle Javey\",\"employeeAvailability\":{\"sunday\":{\"startTime\":8,\"endTime\":22},\"monday\":{\"startTime\":16.5,\"endTime\":22},\"wednesday\":{\"startTime\":16.5,\"endTime\":22},\"thursday\":{\"startTime\":16.5,\"endTime\":22},\"friday\":{\"startTime\":16.5,\"endTime\":22},\"saturday\":{\"startTime\":8,\"endTime\":22},\"totalHoursAvailable\":50},\"employeeHoursToWork\":\"20\",\"employeeDepartment\":\"Post Office\"},{\"employeeName\":\"Jason Leibel\",\"employeeAvailability\":{\"monday\":{\"startTime\":8,\"endTime\":21.5},\"tuesday\":{\"startTime\":8,\"endTime\":21.5},\"wednesday\":{\"startTime\":8,\"endTime\":21.5},\"thursday\":{\"startTime\":8,\"endTime\":21.5},\"saturday\":{\"startTime\":8,\"endTime\":21.5},\"totalHoursAvailable\":67.5},\"employeeHoursToWork\":\"40\",\"employeeDepartment\":\"Post Office\"},{\"employeeName\":\"Tyson Leibel\",\"employeeAvailability\":{\"monday\":{\"startTime\":8.5,\"endTime\":16},\"tuesday\":{\"startTime\":8.5,\"endTime\":16},\"wednesday\":{\"startTime\":8.5,\"endTime\":16},\"thursday\":{\"startTime\":8.5,\"endTime\":16},\"friday\":{\"startTime\":8.5,\"endTime\":16},\"totalHoursAvailable\":37.5},\"employeeHoursToWork\":\"40\",\"employeeDepartment\":\"Post Office\"}],\n      timeObj: {\n        departments: [\n          {\n            name: \"Post Office\", requiredEmployeeAtGivenTime: 1, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 9, close: 21.5},\n              {day: \"monday\", open: 9, close: 21.5},\n              {day: \"tuesday\", open: 9, close: 21.5},\n              {day: \"wednesday\", open: 9, close: 21.5},\n              {day: \"thursday\", open: 9, close: 21.5},\n              {day: \"friday\", open: 9, close: 21.5},\n              {day: \"saturday\", open: 9, close: 17.5}\n            ]\n          }\n        ]\n      }\n    }\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Roboto\", sans-serif !important;\n}\n\n.v-data-table-header {\n  background-color: #e6e6e6;\n}\n</style>\n"],"sourceRoot":"src"}]}