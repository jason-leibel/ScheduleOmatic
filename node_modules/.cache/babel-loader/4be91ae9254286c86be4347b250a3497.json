{"remainingRequest":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js!/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue","mtime":1616919271866},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":1616809256131},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js","mtime":1616809255971},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":1616809256131},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js","mtime":1616809260729}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"ScheduleView\",\n  props: [\"employeeList\"],\n  methods: {\n    generateSchedule: function generateSchedule(list) {\n      var _this = this;\n\n      this.scheduleObj = [];\n      this.timeObj.departments.forEach(function (dep) {\n        var scheduleObj = {};\n\n        var depart = _this.timeObj.departments.filter(function (department) {\n          return department.name === dep.name;\n        })[0];\n\n        var workers = list.filter(function (person) {\n          return person.employeeDepartment === dep.name;\n        });\n        depart.timeFrames.forEach(function (tf) {\n          scheduleObj[tf.day] = {};\n          workers.forEach(function (wrk) {\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName] = {};\n              scheduleObj[tf.day][wrk.employeeName].available = true;\n              var empStartTime = wrk.employeeAvailability[tf.day].startTime;\n              var empEndTime = wrk.employeeAvailability[tf.day].endTime; // If the employee is available before or at shift open\n\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open;\n                var hoursAvail = empEndTime - empStartTime;\n                scheduleObj[tf.day][wrk.employeeName].endTime = hoursAvail < 8 ? tf.open + hoursAvail : tf.open + 8 > tf.close ? tf.close : tf.open + 8;\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime;\n\n                var _hoursAvail = empEndTime - empStartTime;\n\n                scheduleObj[tf.day][wrk.employeeName].endTime = _hoursAvail + empStartTime > tf.close ? tf.close : _hoursAvail + empStartTime;\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName] = {};\n              scheduleObj[tf.day][wrk.employeeName].available = false;\n            }\n          });\n        });\n\n        _this.translateToTable(scheduleObj, dep.name);\n      });\n    },\n    translateToTable: function translateToTable(obj, department) {\n      var _this2 = this;\n\n      var result = [];\n      obj = this.filterOutPeople(obj, department); // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n\n      var days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      this.employeeList.filter(function (e) {\n        return e.employeeDepartment === department;\n      }).forEach(function (employee) {\n        var temp = {};\n        temp[\"name\"] = employee.employeeName;\n        temp[\"department\"] = employee.employeeDepartment;\n        temp[\"totalTimeThisWeek\"] = 0;\n        days.forEach(function (day) {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime;\n            }\n\n            temp[day] = obj[day][employee.employeeName].available ? _this2.doubleToTimeString(obj[day][employee.employeeName].startTime) + \" - \" + _this2.doubleToTimeString(obj[day][employee.employeeName].endTime) : \"Not Available\";\n          }\n        });\n        result.push(temp);\n      });\n      result.forEach(function (res) {\n        _this2.scheduleObj.push(res);\n      });\n    },\n    filterOutPeople: function filterOutPeople(obj, department) {\n      var _this3 = this;\n\n      var timeWorked = {};\n      var middleDayOptions = {};\n\n      var _loop = function _loop(day) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = [];\n          } // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n\n\n          var employees = _this3.shuffleArray(_this3.jsonObjectsToArray(obj[day]));\n\n          var depConst = _this3.timeObj.departments.filter(function (i) {\n            return i.name === department;\n          })[0];\n\n          var timeConst = depConst.timeFrames.filter(function (i) {\n            return i.day === day;\n          })[0];\n\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            (function () {\n              var hasStartingEmployee = false;\n              var hasClosingEmployee = false;\n              var startingEmployee = null;\n              var closingEmployee = null;\n              var keepLooping = true;\n\n              while (keepLooping) {\n                var _loop2 = function _loop2(i) {\n                  var employee = employees[i];\n\n                  if (employee.available) {\n                    if (employee.startTime === timeConst.open) {\n                      if (hasStartingEmployee) {\n                        if (timeWorked[startingEmployee.name] >= _this3.employeeList.filter(function (e) {\n                          return e.employeeName === startingEmployee.name;\n                        })[0].employeeHoursToWork) {\n                          middleDayOptions[day].push(startingEmployee);\n                          employees.splice(employees.indexOf(startingEmployee), 1);\n                          startingEmployee = employee;\n                        } else {\n                          employees.splice(i, 1);\n                        }\n                      }\n\n                      startingEmployee = employee;\n                      hasStartingEmployee = true;\n                    } else if (employee.endTime === timeConst.close) {\n                      if (hasClosingEmployee) {\n                        if (timeWorked[closingEmployee.name] >= _this3.employeeList.filter(function (e) {\n                          return e.employeeName === closingEmployee.name;\n                        })[0].employeeHoursToWork) {\n                          middleDayOptions[day].push(closingEmployee);\n                          employees.splice(employees.indexOf(closingEmployee), 1);\n                          closingEmployee = employee;\n                        } else {\n                          employees.splice(i, 1);\n                        }\n                      }\n\n                      closingEmployee = employee;\n                      hasClosingEmployee = true;\n                    } else {\n                      // Employee can work, not start or close tho\n                      middleDayOptions[day].push(employee);\n                      employees.splice(i, 1);\n                    }\n                  }\n\n                  if (employees.filter(function (e) {\n                    return e.available;\n                  }).length <= depConst.requiredEmployeeAtGivenTime) {\n                    keepLooping = false;\n                    employees.forEach(function (employ) {\n                      if (timeWorked[employ.name] === undefined) {\n                        timeWorked[employ.name] = 0;\n                      }\n\n                      timeWorked[employ.name] += employee.endTime - employee.startTime;\n                    });\n                    return \"break\";\n                  }\n                };\n\n                for (var i = 0; i < employees.length; i++) {\n                  var _ret = _loop2(i);\n\n                  if (_ret === \"break\") break;\n                }\n              }\n            })();\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            _this3.sendNotification(\"Warning\", \"warning\", \"Not enough employees available on \".concat(day, \" in \").concat(department));\n          }\n\n          obj[day] = _this3.arrayToJsonObjects(employees, day);\n        }\n      };\n\n      for (var day in obj) {\n        _loop(day);\n      }\n\n      console.log(middleDayOptions);\n      return obj;\n    },\n    arrayToJsonObjects: function arrayToJsonObjects(arr, day) {\n      var result = {};\n      arr.forEach(function (item) {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item;\n      });\n      return result;\n    },\n    jsonObjectsToArray: function jsonObjectsToArray(object) {\n      var result = [];\n\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key;\n          result.push(object[key]);\n        }\n      }\n\n      return result;\n    },\n    doubleToTimeString: function doubleToTimeString(str) {\n      var val = parseFloat(str);\n\n      if (val > 12) {\n        val = val - 12;\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" PM\");\n      } else {\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" AM\");\n      }\n    },\n    shuffleArray: function shuffleArray(array) {\n      var copy = Array.from(array);\n\n      for (var i = copy.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n\n      return copy;\n    },\n    getMinutesFromDouble: function getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\";\n\n        case 0.5:\n          return \"30\";\n\n        case 0.75:\n          return \"45\";\n\n        default:\n          return \"00\";\n      }\n    }\n  },\n  data: function data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [{\n        text: 'Employee Name',\n        align: 'start',\n        value: 'name'\n      }, {\n        text: 'Total Hours',\n        value: 'totalTimeThisWeek'\n      }, {\n        text: 'Sunday',\n        value: 'sunday'\n      }, {\n        text: 'Monday',\n        value: 'monday'\n      }, {\n        text: 'Tuesday',\n        value: 'tuesday'\n      }, {\n        text: 'Wednesday',\n        value: 'wednesday'\n      }, {\n        text: 'Thursday',\n        value: 'thursday'\n      }, {\n        text: 'Friday',\n        value: 'friday'\n      }, {\n        text: 'Saturday',\n        value: 'saturday'\n      }],\n      timeObj: {\n        departments: [{\n          name: \"Post Office\",\n          requiredEmployeeAtGivenTime: 2,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"monday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"tuesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"wednesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"thursday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"friday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"saturday\",\n            open: 9,\n            close: 17.5\n          }]\n        }, {\n          name: \"Automotive Parts\",\n          requiredEmployeeAtGivenTime: 2,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"monday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"tuesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"wednesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"thursday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"friday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"saturday\",\n            open: 10.5,\n            close: 17\n          }]\n        }, {\n          name: \"Customer Service\",\n          requiredEmployeeAtGivenTime: 1,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"monday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"tuesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"wednesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"thursday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"friday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"saturday\",\n            open: 10.5,\n            close: 17\n          }]\n        }]\n      }\n    };\n  }\n};",{"version":3,"sources":["ScheduleView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card\n      class=\"mx-auto\"\n      tile\n      style=\"width: 95%; padding: 10px; margin: 20px auto;\"\n  >\n    <v-data-table\n        :headers=\"scheduleHeaders\"\n        :items=\"scheduleObj\"\n        dense\n        group-by=\"department\"\n        :items-per-page=\"10\">\n      <template v-slot:group.header=\"{items, isOpen, toggle}\">\n        <th colspan=\"9\" @click=\"toggle\">\n          <v-icon\n          >{{ isOpen ? 'mdi-minus' : 'mdi-plus' }}\n          </v-icon>\n          {{ items[0].department }}\n        </th>\n      </template>\n      <template v-slot:item=\"{ item }\">\n        <tr>\n          <td v-for=\"(header,key) in scheduleHeaders\" :key=\"key\">\n            <v-edit-dialog\n                :return-value.sync=\"item[header.value]\"\n                large\n            > {{ item[header.value] }}\n              <template v-slot:input>\n                <v-text-field\n                    v-model=\"item[header.value]\"\n                    label=\"Edit\"\n                    single-line\n                ></v-text-field>\n              </template>\n            </v-edit-dialog>\n          </td>\n        </tr>\n      </template>\n    </v-data-table>\n  </v-card>\n</template>\n\n<script>\nexport default {\n  name: \"ScheduleView\",\n  props: [\n    \"employeeList\"\n  ],\n  methods: {\n    generateSchedule(list) {\n      this.scheduleObj = []\n\n      this.timeObj.departments.forEach(dep => {\n        let scheduleObj = {}\n\n        let depart = this.timeObj.departments.filter(department => department.name === dep.name)[0]\n        let workers = list.filter(person => person.employeeDepartment === dep.name)\n        depart.timeFrames.forEach(tf => {\n          scheduleObj[tf.day] = {}\n          workers.forEach(wrk => {\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = true\n              let empStartTime = wrk.employeeAvailability[tf.day].startTime\n              let empEndTime = wrk.employeeAvailability[tf.day].endTime\n              // If the employee is available before or at shift open\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = (\n                    hoursAvail < 8\n                ) ? tf.open + hoursAvail : ((tf.open + 8) > tf.close) ? tf.close : tf.open + 8\n\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = ((hoursAvail + empStartTime) > tf.close) ? tf.close :\n                    (hoursAvail + empStartTime)\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = false\n            }\n          })\n        })\n        this.translateToTable(scheduleObj, dep.name)\n      })\n    },\n    translateToTable(obj, department) {\n      let result = []\n      obj = this.filterOutPeople(obj, department)\n      // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n      let days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n      this.employeeList.filter(e => e.employeeDepartment === department).forEach(employee => {\n        let temp = {}\n        temp[\"name\"] = employee.employeeName\n        temp[\"department\"] = employee.employeeDepartment\n        temp[\"totalTimeThisWeek\"] = 0\n        days.forEach(day => {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime\n            }\n            temp[day] = (obj[day][employee.employeeName].available) ?\n                this.doubleToTimeString(obj[day][employee.employeeName].startTime) +\n                \" - \" + this.doubleToTimeString(obj[day][employee.employeeName].endTime)\n                : \"Not Available\"\n          }\n        })\n        result.push(temp)\n      })\n      result.forEach(res => {\n        this.scheduleObj.push(res)\n      })\n    },\n    filterOutPeople(obj, department) {\n      let timeWorked = {}\n      let middleDayOptions = {}\n      for (let day in obj) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = []\n          }\n          // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n          let employees = this.shuffleArray(this.jsonObjectsToArray(obj[day]))\n          let depConst = this.timeObj.departments.filter(i => i.name === department)[0]\n          let timeConst = depConst.timeFrames.filter(i => i.day === day)[0]\n\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            let hasStartingEmployee = false\n            let hasClosingEmployee = false\n            let startingEmployee = null\n            let closingEmployee = null\n            let keepLooping = true\n            while (keepLooping) {\n              for (let i = 0; i < employees.length; i++) {\n                let employee = employees[i]\n                if (employee.available) {\n                  if (employee.startTime === timeConst.open) {\n                    if (hasStartingEmployee) {\n                      if (timeWorked[startingEmployee.name] >= this.employeeList.filter(e => e.employeeName === startingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(startingEmployee)\n                        employees.splice(employees.indexOf(startingEmployee), 1)\n                        startingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    startingEmployee = employee\n                    hasStartingEmployee = true\n                  } else if (employee.endTime === timeConst.close) {\n                    if (hasClosingEmployee) {\n                      if (timeWorked[closingEmployee.name] >= this.employeeList.filter(e => e.employeeName === closingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(closingEmployee)\n                        employees.splice(employees.indexOf(closingEmployee), 1)\n                        closingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    closingEmployee = employee\n                    hasClosingEmployee = true\n                  } else {\n                    // Employee can work, not start or close tho\n                    middleDayOptions[day].push(employee)\n                    employees.splice(i, 1)\n                  }\n                }\n                if (employees.filter(e => e.available).length <= depConst.requiredEmployeeAtGivenTime) {\n                  keepLooping = false\n                  employees.forEach(employ => {\n                    if (timeWorked[employ.name] === undefined) {\n                      timeWorked[employ.name] = 0\n                    }\n                    timeWorked[employ.name] += employee.endTime - employee.startTime\n                  })\n                  break\n                }\n              }\n            }\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            this.sendNotification(\"Warning\", \"warning\", `Not enough employees available on ${day} in ${department}`)\n          }\n\n          obj[day] = this.arrayToJsonObjects(employees, day)\n        }\n      }\n      console.log(middleDayOptions)\n      return obj\n    },\n    arrayToJsonObjects(arr, day) {\n      let result = {}\n      arr.forEach(item => {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item\n      })\n      return result\n    },\n    jsonObjectsToArray(object) {\n      let result = []\n      for (let key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key\n          result.push(object[key])\n        }\n      }\n      return result\n    },\n    doubleToTimeString(str) {\n      let val = parseFloat(str)\n      if (val > 12) {\n        val = val - 12\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} PM`\n      } else {\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} AM`\n      }\n    },\n    shuffleArray(array) {\n      let copy = Array.from(array)\n      for (let i = copy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n      return copy\n    },\n    getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\"\n        case 0.5:\n          return \"30\"\n        case 0.75:\n          return \"45\"\n        default:\n          return \"00\"\n      }\n    }\n  },\n  data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [\n        {text: 'Employee Name', align: 'start', value: 'name'},\n        {text: 'Total Hours', value: 'totalTimeThisWeek'},\n        {text: 'Sunday', value: 'sunday'},\n        {text: 'Monday', value: 'monday'},\n        {text: 'Tuesday', value: 'tuesday'},\n        {text: 'Wednesday', value: 'wednesday'},\n        {text: 'Thursday', value: 'thursday'},\n        {text: 'Friday', value: 'friday'},\n        {text: 'Saturday', value: 'saturday'}\n      ],\n      timeObj: {\n        departments: [\n          {\n            name: \"Post Office\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 9, close: 21.5},\n              {day: \"monday\", open: 9, close: 21.5},\n              {day: \"tuesday\", open: 9, close: 21.5},\n              {day: \"wednesday\", open: 9, close: 21.5},\n              {day: \"thursday\", open: 9, close: 21.5},\n              {day: \"friday\", open: 9, close: 21.5},\n              {day: \"saturday\", open: 9, close: 17.5}\n            ]\n          },\n          {\n            name: \"Automotive Parts\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          },\n          {\n            name: \"Customer Service\", requiredEmployeeAtGivenTime: 1, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components"}]}