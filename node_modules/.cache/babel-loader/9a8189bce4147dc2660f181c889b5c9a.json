{"remainingRequest":"/Users/jason/Desktop/GmailPIDTool/node_modules/thread-loader/dist/cjs.js!/Users/jason/Desktop/GmailPIDTool/node_modules/babel-loader/lib/index.js!/Users/jason/Desktop/GmailPIDTool/node_modules/vue-gapi/dist/vue-gapi.common.js","dependencies":[{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/vue-gapi/dist/vue-gapi.common.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailPIDTool/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":["/*!\n * vue-gapi v1.1.0\n * (c) 2021 CedricPoilly\n * Released under the MIT License.\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction getObjectCopy(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nfunction loadGapiScript() {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n\n    script.onreadystatechange = script.onload = function () {\n      var interval = setInterval(function () {\n        if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n          clearInterval(interval);\n\n          if (window.gapi) {\n            resolve(window.gapi);\n          } else {\n            reject();\n          }\n        }\n      }, 100);\n    };\n\n    script.onerror = function (message, url, line, column, error) {\n      reject({\n        message: message,\n        url: url,\n        line: line,\n        column: column,\n        error: error\n      });\n    };\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  });\n}\n\nvar GapiClientProvider = function GapiClientProvider(clientConfig) {\n  this.clientConfig = getObjectCopy(clientConfig);\n  this.promise = null;\n  this.client = null;\n};\n\nGapiClientProvider.prototype.getClientConfig = function getClientConfig() {\n  return this.clientConfig;\n};\n\nGapiClientProvider.prototype.getClient = function getClient() {\n  var this$1 = this;\n\n  if (null !== this.client) {\n    return Promise.resolve(this.client);\n  }\n\n  if (null === this.promise) {\n    this.promise = loadGapiScript().then(function (gapi) {\n      return new Promise(function (resolve, reject) {\n        gapi.load('client:auth2', function () {\n          gapi.client.init(this$1.clientConfig).then(function () {\n            this$1.client = {\n              gapi: gapi,\n              authInstance: gapi.auth2.getAuthInstance()\n            };\n            resolve(this$1.client);\n          }, reject);\n        });\n      });\n    });\n  }\n\n  return this.promise;\n};\n\nfunction sessionFromCurrentUser(currentUser) {\n  var session = sessionFromAuthResponse(currentUser.getAuthResponse(true));\n  var profile = currentUser.getBasicProfile();\n\n  if (profile) {\n    session.id = profile.getId();\n    session.fullName = profile.getName();\n    session.firstName = profile.getGivenName();\n    session.lastName = profile.getFamilyName();\n    session.email = profile.getEmail();\n    session.imageUrl = profile.getImageUrl();\n  }\n\n  return session;\n}\n\nfunction sessionFromAuthResponse(authResponse) {\n  return {\n    accessToken: authResponse.access_token,\n    idToken: authResponse.id_token,\n    expiresAt: expiresAt(authResponse)\n  };\n}\n/**\n * Return the expiration time of the user's auth session.\n *\n * @private\n * @param {object} authResponse gapi.auth2.AuthResponse object\n *\n * @return {number}\n */\n\n\nfunction expiresAt(authResponse) {\n  return authResponse.expires_in * 1000 + Date.now();\n}\n/**\n * Google API Client.\n *\n * @typedef GoogleAuthService#gapi\n * @see {@link https://github.com/google/google-api-javascript-client}\n */\n\n/**\n * Singleton class that provides methods to allow the user to sign in with a\n * Google account, get the user's current sign-in status, get specific data\n * from the user's Google profile, request additional scopes, and sign out\n * from the current account.\n *\n * @typedef GoogleAuthService#GoogleAuth\n * @see {@link https://developers.google.com/identity/sign-in/web/reference#authentication}\n */\n\n/**\n * Object that represents the current user.\n *\n * @typedef GoogleAuthService#GoogleUser\n * @see {@link https://developers.google.com/identity/sign-in/web/reference#googleusergetid}\n */\n\n/**\n * Exposed as a <code>$gapi</code> member of the {@link Vue} instance.\n *\n * @class GoogleAuthService\n */\n\n\nvar GoogleAuthService = function GoogleAuthService(clientProvider, sessionStorage) {\n  this.clientProvider = clientProvider;\n  this.sessionStorage = sessionStorage;\n};\n/**\n * Returns an initialized {@link GoogleAuthService#gapi} client.\n *\n * @method GoogleAuthService#getGapiClient\n * @see {@link https://github.com/google/google-api-javascript-client/blob/master/docs/start.md}\n *\n * @return {Promise<GoogleAuthService#gapi>}\n */\n\n\nGoogleAuthService.prototype.getGapiClient = function getGapiClient() {\n  return this.clientProvider.getClient().then(function (ref) {\n    var gapi = ref.gapi;\n    return gapi;\n  });\n};\n/**\n * Returns the {@link GoogleAuthService#GoogleAuth} object.\n *\n * @method GoogleAuthService#getAuthInstance\n * @see [gapi.auth2.getAuthInstance]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2getauthinstance}\n * @since 1.0.0\n *\n * @return {Promise<GoogleAuthService#GoogleAuth>}\n */\n\n\nGoogleAuthService.prototype.getAuthInstance = function getAuthInstance() {\n  return this.clientProvider.getClient().then(function (ref) {\n    var authInstance = ref.authInstance;\n    return authInstance;\n  });\n};\n/**\n * Returns a {@link GoogleAuthService#GoogleUser} object that represents the current user.\n *\n * @method GoogleAuthService#getCurrentUser\n * @see [GoogleAuth.currentUser.get]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthcurrentuserget}\n * @since 1.0.0\n *\n * @return {Promise<GoogleAuthService#GoogleUser>}\n */\n\n\nGoogleAuthService.prototype.getCurrentUser = function getCurrentUser() {\n  return this.getAuthInstance().then(function (authInstance) {\n    return authInstance.currentUser.get();\n  });\n};\n/**\n * Returns the authorization code set via {@link GoogleAuthService#grantOfflineAccess}.\n *\n * @method GoogleAuthService#getOfflineAccessCode\n *\n * @return {string|null}\n */\n\n\nGoogleAuthService.prototype.getOfflineAccessCode = function getOfflineAccessCode() {\n  return this.sessionStorage.getItem('offlineAccessCode');\n};\n/**\n * Get permission from the user to access the specified scopes offline.\n *\n * @method GoogleAuthService#grantOfflineAccess\n * @see [GoogleAuth.grantOfflineAccess]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions}\n *\n * @return {Promise<string>} authorization code\n */\n\n\nGoogleAuthService.prototype.grantOfflineAccess = function grantOfflineAccess() {\n  var this$1 = this;\n  return this.getAuthInstance().grantOfflineAccess().then(function (ref) {\n    var code = ref.code;\n    this$1.sessionStorage.setItem('offlineAccessCode', code);\n    return code;\n  });\n};\n/**\n * Check if requested scopes were granted or not.\n *\n * @private\n * @method GoogleAuthService#hasGrantedRequestedScopes\n * @param {GoogleAuthService#GoogleUser} currentUser\n *\n * @return {boolean}\n */\n\n\nGoogleAuthService.prototype.hasGrantedRequestedScopes = function hasGrantedRequestedScopes(currentUser) {\n  var ref = this.clientProvider.getClientConfig();\n  var scope = ref.scope;\n  return scope ? currentUser.hasGrantedScopes(scope) : true;\n};\n/**\n * @typedef GoogleAuthService#LoginOptions\n * @property {boolean} [grantOfflineAccess=false] Additionally gets permission from the user to access the specified scopes offline via {@link GoogleAuthService#getOfflineAccessCode}\n */\n\n/**\n * @typedef GoogleAuthService#LoginResponse\n * @property {boolean} hasGrantedScopes True if the requested scopes were granted.\n * @property {GoogleAuthService#GoogleUser} currentUser Current user\n * @property {string} [code] Authorization code if <code>grantOfflineAccess: true</code>\n */\n\n/**\n * Signs in the user and initializes session.\n *\n * @method GoogleAuthService#login\n * @see [GoogleAuth.signIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignin}\n *\n * @param {GoogleAuthService#LoginOptions} [options]\n *\n * @return {Promise<GoogleAuthService#LoginResponse>}\n *\n * @example\n * <script>\n * export default {\n *   name: 'login-shortcut',\n *\n *   methods: {\n *     login() {\n *       this.$gapi.login({ grantOfflineAccess: true })\n *     },\n *   },\n * }\n * </script>\n */\n\n\nGoogleAuthService.prototype.login = function login(ref) {\n  var this$1 = this;\n  if (ref === void 0) ref = {};\n  var grantOfflineAccess = ref.grantOfflineAccess;\n  if (grantOfflineAccess === void 0) grantOfflineAccess = false;\n  return this.getAuthInstance().then(function (authInstance) {\n    return authInstance.signIn().then(function (currentUser) {\n      this$1.sessionStorage.set(sessionFromCurrentUser(currentUser));\n      return {\n        currentUser: currentUser,\n        hasGrantedScopes: this$1.hasGrantedRequestedScopes(currentUser)\n      };\n    });\n  }).then(function (response) {\n    if (grantOfflineAccess) {\n      return this$1.grantOfflineAccess().then(function (code) {\n        return Object.assign({}, response, {\n          code: code\n        });\n      });\n    }\n\n    return response;\n  });\n};\n/**\n * Forces a refresh of the access token.\n *\n * This should be placed in your App.vue on the created page and run on a timer of 45min.\n *\n * @method GoogleAuthService#refreshToken\n * @see [GoogleUser.reloadAuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserreloadauthresponse}\n *\n * @return {Promise<AuthResponse>}\n *\n * @example\n * <script>\n *   name: 'App'\n *\n *   created () {\n *   try {\n *     // NOTE: 45min refresh policy is what google recommends\n *     window.setInterval(this.$gapi.refreshToken(), 2.7e+6)\n *   } catch (e) {\n *     console.error(e)\n *   }\n *\n * }\n * </script>\n */\n\n\nGoogleAuthService.prototype.refreshToken = function refreshToken() {\n  var this$1 = this;\n  return this.getCurrentUser().then(function (currentUser) {\n    return currentUser.reloadAuthResponse();\n  }).then(function (authResponse) {\n    this$1.sessionStorage.set(Object.assign({}, this$1.sessionStorage.get(), sessionFromAuthResponse(authResponse)));\n    return authResponse;\n  });\n};\n/**\n * Ask to grant scopes from user.\n *\n * @method GoogleAuthService#grant\n * @see [GoogleUser.grant]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergrantoptions}\n * @since 0.4.0\n *\n * @return {Promise<GoogleAuthService#GoogleUser>}\n *\n * @example\n * <script>\n * export default {\n *   name: 'grant-scope',\n *\n *   methods: {\n *     grant() {\n *       return this.$gapi.grant()\n *     },\n *   },\n * }\n * </script>\n */\n\n\nGoogleAuthService.prototype.grant = function grant() {\n  var this$1 = this;\n  return this.getCurrentUser().then(function (currentUser) {\n    if (this$1.hasGrantedRequestedScopes(currentUser)) {\n      return currentUser;\n    }\n\n    var ref = this$1.clientProvider.getClientConfig();\n    var scope = ref.scope;\n    return currentUser.grant({\n      scope: scope\n    }).then(function () {\n      return currentUser;\n    });\n  });\n};\n/**\n * Signs out the current account from the application and clear session storage.\n *\n * @method GoogleAuthService#logout\n * @see [GoogleAuth.signOut]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignout}\n *\n * @return {Promise}\n *\n * @example\n * <script>\n * export default {\n *   name: 'logout-shortcut',\n *\n *   methods: {\n *     login() {\n *       this.$gapi.logout()\n *     },\n *   },\n * }\n * </script>\n */\n\n\nGoogleAuthService.prototype.logout = function logout() {\n  var this$1 = this;\n  return this.getAuthInstance().then(function (authInstance) {\n    return authInstance.signOut();\n  }).then(function () {\n    return this$1.sessionStorage.clear();\n  });\n};\n/**\n * Determines if the user is signed in via local storage.\n *\n * @method GoogleAuthService#isAuthenticated\n * @since 0.0.10\n * @return {boolean}\n *\n * @example\n * <script>\n * export default {\n *   name: 'login-shortcut-check',\n *\n *   methods: {\n *     login() {\n *       if (this.$gapi.isAuthenticated() !== true) {\n *         this.$gapi.login()\n *       }\n *     },\n *   },\n * }\n * </script>\n */\n\n\nGoogleAuthService.prototype.isAuthenticated = function isAuthenticated() {\n  return new Date().getTime() < this.sessionStorage.getItem('expiresAt');\n};\n/**\n * Determines if the user is signed in via Google.\n *\n * @method GoogleAuthService#isSignedIn\n * @see [GoogleUser.isSignedIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserissignedin}\n * @since 0.0.10\n *\n * @return {Promise<boolean>}\n */\n\n\nGoogleAuthService.prototype.isSignedIn = function isSignedIn() {\n  return this.getCurrentUser().then(function (currentUser) {\n    return currentUser.isSignedIn();\n  });\n};\n/**\n * Accept the callback to be notified when the authentication status changes.\n *\n * @method GoogleAuthService#listenUserSignIn\n * @see [GoogleAuth.isSignedIn.listen]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthissignedinlistenlistener}\n * @since 0.0.10\n *\n * @param {function} callback\n * the callback function to be notified of an authentication status change\n *\n * @return {Promise<void>}\n */\n\n\nGoogleAuthService.prototype.listenUserSignIn = function listenUserSignIn(callback) {\n  return this.getAuthInstance().then(function (authInstance) {\n    callback(authInstance.currentUser.get().isSignedIn());\n    authInstance.isSignedIn.listen(callback);\n  });\n};\n/**\n * @typedef {object} GoogleAuthService#UserData\n *\n * @see [gapi.auth2.AuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2authresponse}\n * @see [GoogleUser.getBasicProfile]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergetbasicprofile}\n *\n * @property {string} id user's unique ID string\n * @property {string} firstName given name\n * @property {string} lastName family name\n * @property {string} fullName full name\n * @property {string} email\n * @property {string} imageUrl\n * @property {number} expiresAt\n * @property {string} accessToken granted access token\n * @property {string} idToken granted ID token\n * @property {string} [offlineAccessCode]\n */\n\n/**\n * Gets the user data from local storage\n *\n * @method GoogleAuthService#getUserData\n * @since 0.0.10\n *\n * @return {GoogleAuthService#UserData|null}\n */\n\n\nGoogleAuthService.prototype.getUserData = function getUserData() {\n  return this.sessionStorage.get();\n};\n\nvar LOCAL_STORAGE_KEY = 'gapi.session';\n\nvar SessionStorage = function SessionStorage(localStorage) {\n  if (localStorage === void 0) localStorage = window.localStorage;\n  this.localStorage = localStorage;\n};\n\nSessionStorage.prototype.set = function set(session) {\n  this.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(session));\n};\n\nSessionStorage.prototype.setItem = function setItem(key, value) {\n  var session = this.get() || {};\n  session[key] = value;\n  this.set(session);\n};\n\nSessionStorage.prototype.get = function get() {\n  return JSON.parse(this.localStorage.getItem(LOCAL_STORAGE_KEY));\n};\n\nSessionStorage.prototype.getItem = function getItem(key) {\n  var session = this.get() || {};\n  return session[key];\n};\n\nSessionStorage.prototype.clear = function clear() {\n  this.localStorage.removeItem(LOCAL_STORAGE_KEY);\n};\n/**\n * @class Vue\n */\n\n/** @module vue-gapi */\n\n/**\n * <code>gapi.client.init</code> configuration parameters.\n *\n * @typedef {object} Options\n * @static\n * @see [gapi.client.init]{@link https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientinitargs--}\n *\n * @property {string} [apiKey] The API Key to use\n * @property {string[]} [discoveryDocs] An array of discovery doc URLs or discovery doc JSON objects\n * @property {string} [clientId] The app's client ID, found and created in the Google Developers Console\n * @property {string} [scope] The scopes to request, as a space-delimited string\n */\n\n\nvar index = {\n  /**\n   * @param {Vue} Vue Vue constructor\n   * @param {module:vue-gapi.Options} clientConfig VueGapi plugin options\n   * @see [Using a Plugin]{@link https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin}\n   */\n  install: function install(Vue, clientConfig) {\n    var clientProvider = new GapiClientProvider(clientConfig);\n    var sessionStorage = new SessionStorage();\n    /**\n     * @memberof Vue\n     * @member {GoogleAuthService}\n     *\n     * @example\n     * <script>\n     *   export default {\n     *     name: 'my-component',\n     *\n     *     methods: {\n     *       login() {\n     *         this.$gapi.getGapiClient().then((gapi) => {\n     *           // gapi.sheets.spreadsheet.get(...)\n     *           // ...\n     *         })\n     *       },\n     *     },\n     *   }\n     * </script>\n     */\n\n    Vue.prototype.$gapi = new GoogleAuthService(clientProvider, sessionStorage);\n  }\n};\nvar version = '1.1.0';\nexports.default = index;\nexports.version = version;",{"version":3,"sources":["/Users/jason/Desktop/GmailPIDTool/node_modules/vue-gapi/dist/vue-gapi.common.js"],"names":["Object","defineProperty","exports","value","getObjectCopy","object","JSON","parse","stringify","loadGapiScript","Promise","resolve","reject","script","document","createElement","src","onreadystatechange","onload","interval","setInterval","readyState","test","clearInterval","window","gapi","onerror","message","url","line","column","error","getElementsByTagName","appendChild","GapiClientProvider","clientConfig","promise","client","prototype","getClientConfig","getClient","this$1","then","load","init","authInstance","auth2","getAuthInstance","sessionFromCurrentUser","currentUser","session","sessionFromAuthResponse","getAuthResponse","profile","getBasicProfile","id","getId","fullName","getName","firstName","getGivenName","lastName","getFamilyName","email","getEmail","imageUrl","getImageUrl","authResponse","accessToken","access_token","idToken","id_token","expiresAt","expires_in","Date","now","GoogleAuthService","clientProvider","sessionStorage","getGapiClient","ref","getCurrentUser","get","getOfflineAccessCode","getItem","grantOfflineAccess","code","setItem","hasGrantedRequestedScopes","scope","hasGrantedScopes","login","signIn","set","response","assign","refreshToken","reloadAuthResponse","grant","logout","signOut","clear","isAuthenticated","getTime","isSignedIn","listenUserSignIn","callback","listen","getUserData","LOCAL_STORAGE_KEY","SessionStorage","localStorage","key","removeItem","index","install","Vue","$gapi","version","default"],"mappings":"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","sourcesContent":["/*!\n * vue-gapi v1.1.0\n * (c) 2021 CedricPoilly\n * Released under the MIT License.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction getObjectCopy(object) {\n  return JSON.parse(JSON.stringify(object))\n}\n\nfunction loadGapiScript() {\n  return new Promise(function (resolve, reject) {\n    var script = document.createElement('script');\n    script.src = 'https://apis.google.com/js/api.js';\n    script.onreadystatechange = script.onload = function () {\n      var interval = setInterval(function () {\n        if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n          clearInterval(interval);\n          if (window.gapi) {\n            resolve(window.gapi);\n          } else {\n            reject();\n          }\n        }\n      }, 100);\n    };\n    script.onerror = function (message, url, line, column, error) {\n      reject({ message: message, url: url, line: line, column: column, error: error });\n    };\n    document.getElementsByTagName('head')[0].appendChild(script);\n  })\n}\n\nvar GapiClientProvider = function GapiClientProvider(clientConfig) {\n  this.clientConfig = getObjectCopy(clientConfig);\n  this.promise = null;\n  this.client = null;\n};\n\nGapiClientProvider.prototype.getClientConfig = function getClientConfig () {\n  return this.clientConfig\n};\n\nGapiClientProvider.prototype.getClient = function getClient () {\n    var this$1 = this;\n\n  if (null !== this.client) {\n    return Promise.resolve(this.client)\n  }\n\n  if (null === this.promise) {\n    this.promise = loadGapiScript().then(function (gapi) {\n      return new Promise(function (resolve, reject) {\n        gapi.load('client:auth2', function () {\n          gapi.client.init(this$1.clientConfig).then(function () {\n            this$1.client = {\n              gapi: gapi,\n              authInstance: gapi.auth2.getAuthInstance(),\n            };\n            resolve(this$1.client);\n          }, reject);\n        });\n      })\n    });\n  }\n\n  return this.promise\n};\n\nfunction sessionFromCurrentUser(currentUser) {\n  var session = sessionFromAuthResponse(currentUser.getAuthResponse(true));\n  var profile = currentUser.getBasicProfile();\n\n  if (profile) {\n    session.id = profile.getId();\n    session.fullName = profile.getName();\n    session.firstName = profile.getGivenName();\n    session.lastName = profile.getFamilyName();\n    session.email = profile.getEmail();\n    session.imageUrl = profile.getImageUrl();\n  }\n\n  return session\n}\n\nfunction sessionFromAuthResponse(authResponse) {\n  return {\n    accessToken: authResponse.access_token,\n    idToken: authResponse.id_token,\n    expiresAt: expiresAt(authResponse),\n  }\n}\n\n/**\n * Return the expiration time of the user's auth session.\n *\n * @private\n * @param {object} authResponse gapi.auth2.AuthResponse object\n *\n * @return {number}\n */\nfunction expiresAt(authResponse) {\n  return authResponse.expires_in * 1000 + Date.now()\n}\n\n/**\n * Google API Client.\n *\n * @typedef GoogleAuthService#gapi\n * @see {@link https://github.com/google/google-api-javascript-client}\n */\n\n/**\n * Singleton class that provides methods to allow the user to sign in with a\n * Google account, get the user's current sign-in status, get specific data\n * from the user's Google profile, request additional scopes, and sign out\n * from the current account.\n *\n * @typedef GoogleAuthService#GoogleAuth\n * @see {@link https://developers.google.com/identity/sign-in/web/reference#authentication}\n */\n\n/**\n * Object that represents the current user.\n *\n * @typedef GoogleAuthService#GoogleUser\n * @see {@link https://developers.google.com/identity/sign-in/web/reference#googleusergetid}\n */\n\n/**\n * Exposed as a <code>$gapi</code> member of the {@link Vue} instance.\n *\n * @class GoogleAuthService\n */\nvar GoogleAuthService = function GoogleAuthService(clientProvider, sessionStorage) {\n  this.clientProvider = clientProvider;\n  this.sessionStorage = sessionStorage;\n};\n\n/**\n * Returns an initialized {@link GoogleAuthService#gapi} client.\n *\n * @method GoogleAuthService#getGapiClient\n * @see {@link https://github.com/google/google-api-javascript-client/blob/master/docs/start.md}\n *\n * @return {Promise<GoogleAuthService#gapi>}\n */\nGoogleAuthService.prototype.getGapiClient = function getGapiClient () {\n  return this.clientProvider.getClient().then(function (ref) {\n      var gapi = ref.gapi;\n\n      return gapi;\n    })\n};\n\n/**\n * Returns the {@link GoogleAuthService#GoogleAuth} object.\n *\n * @method GoogleAuthService#getAuthInstance\n * @see [gapi.auth2.getAuthInstance]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2getauthinstance}\n * @since 1.0.0\n *\n * @return {Promise<GoogleAuthService#GoogleAuth>}\n */\nGoogleAuthService.prototype.getAuthInstance = function getAuthInstance () {\n  return this.clientProvider\n    .getClient()\n    .then(function (ref) {\n        var authInstance = ref.authInstance;\n\n        return authInstance;\n    })\n};\n\n/**\n * Returns a {@link GoogleAuthService#GoogleUser} object that represents the current user.\n *\n * @method GoogleAuthService#getCurrentUser\n * @see [GoogleAuth.currentUser.get]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthcurrentuserget}\n * @since 1.0.0\n *\n * @return {Promise<GoogleAuthService#GoogleUser>}\n */\nGoogleAuthService.prototype.getCurrentUser = function getCurrentUser () {\n  return this.getAuthInstance().then(function (authInstance) {\n    return authInstance.currentUser.get()\n  })\n};\n\n/**\n * Returns the authorization code set via {@link GoogleAuthService#grantOfflineAccess}.\n *\n * @method GoogleAuthService#getOfflineAccessCode\n *\n * @return {string|null}\n */\nGoogleAuthService.prototype.getOfflineAccessCode = function getOfflineAccessCode () {\n  return this.sessionStorage.getItem('offlineAccessCode')\n};\n\n/**\n * Get permission from the user to access the specified scopes offline.\n *\n * @method GoogleAuthService#grantOfflineAccess\n * @see [GoogleAuth.grantOfflineAccess]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthgrantofflineaccessoptions}\n *\n * @return {Promise<string>} authorization code\n */\nGoogleAuthService.prototype.grantOfflineAccess = function grantOfflineAccess () {\n    var this$1 = this;\n\n  return this.getAuthInstance()\n    .grantOfflineAccess()\n    .then(function (ref) {\n        var code = ref.code;\n\n      this$1.sessionStorage.setItem('offlineAccessCode', code);\n\n      return code\n    })\n};\n\n/**\n * Check if requested scopes were granted or not.\n *\n * @private\n * @method GoogleAuthService#hasGrantedRequestedScopes\n * @param {GoogleAuthService#GoogleUser} currentUser\n *\n * @return {boolean}\n */\nGoogleAuthService.prototype.hasGrantedRequestedScopes = function hasGrantedRequestedScopes (currentUser) {\n  var ref = this.clientProvider.getClientConfig();\n    var scope = ref.scope;\n\n  return scope ? currentUser.hasGrantedScopes(scope) : true\n};\n\n/**\n * @typedef GoogleAuthService#LoginOptions\n * @property {boolean} [grantOfflineAccess=false] Additionally gets permission from the user to access the specified scopes offline via {@link GoogleAuthService#getOfflineAccessCode}\n */\n\n/**\n * @typedef GoogleAuthService#LoginResponse\n * @property {boolean} hasGrantedScopes True if the requested scopes were granted.\n * @property {GoogleAuthService#GoogleUser} currentUser Current user\n * @property {string} [code] Authorization code if <code>grantOfflineAccess: true</code>\n */\n\n/**\n * Signs in the user and initializes session.\n *\n * @method GoogleAuthService#login\n * @see [GoogleAuth.signIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignin}\n *\n * @param {GoogleAuthService#LoginOptions} [options]\n *\n * @return {Promise<GoogleAuthService#LoginResponse>}\n *\n * @example\n * <script>\n * export default {\n *   name: 'login-shortcut',\n *\n *   methods: {\n *     login() {\n *       this.$gapi.login({ grantOfflineAccess: true })\n *     },\n *   },\n * }\n * </script>\n */\nGoogleAuthService.prototype.login = function login (ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var grantOfflineAccess = ref.grantOfflineAccess; if ( grantOfflineAccess === void 0 ) grantOfflineAccess = false;\n\n  return this.getAuthInstance()\n    .then(function (authInstance) {\n      return authInstance.signIn().then(function (currentUser) {\n        this$1.sessionStorage.set(sessionFromCurrentUser(currentUser));\n\n        return {\n          currentUser: currentUser,\n          hasGrantedScopes: this$1.hasGrantedRequestedScopes(currentUser),\n        }\n      })\n    })\n    .then(function (response) {\n      if (grantOfflineAccess) {\n        return this$1.grantOfflineAccess().then(function (code) { return (Object.assign({}, response,\n          {code: code})); })\n      }\n\n      return response\n    })\n};\n\n/**\n * Forces a refresh of the access token.\n *\n * This should be placed in your App.vue on the created page and run on a timer of 45min.\n *\n * @method GoogleAuthService#refreshToken\n * @see [GoogleUser.reloadAuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserreloadauthresponse}\n *\n * @return {Promise<AuthResponse>}\n *\n * @example\n * <script>\n *   name: 'App'\n *\n *   created () {\n *   try {\n *     // NOTE: 45min refresh policy is what google recommends\n *     window.setInterval(this.$gapi.refreshToken(), 2.7e+6)\n *   } catch (e) {\n *     console.error(e)\n *   }\n *\n * }\n * </script>\n */\nGoogleAuthService.prototype.refreshToken = function refreshToken () {\n    var this$1 = this;\n\n  return this.getCurrentUser()\n    .then(function (currentUser) { return currentUser.reloadAuthResponse(); })\n    .then(function (authResponse) {\n      this$1.sessionStorage.set(Object.assign({}, this$1.sessionStorage.get(),\n        sessionFromAuthResponse(authResponse)));\n\n      return authResponse\n    })\n};\n\n/**\n * Ask to grant scopes from user.\n *\n * @method GoogleAuthService#grant\n * @see [GoogleUser.grant]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergrantoptions}\n * @since 0.4.0\n *\n * @return {Promise<GoogleAuthService#GoogleUser>}\n *\n * @example\n * <script>\n * export default {\n *   name: 'grant-scope',\n *\n *   methods: {\n *     grant() {\n *       return this.$gapi.grant()\n *     },\n *   },\n * }\n * </script>\n */\nGoogleAuthService.prototype.grant = function grant () {\n    var this$1 = this;\n\n  return this.getCurrentUser().then(function (currentUser) {\n    if (this$1.hasGrantedRequestedScopes(currentUser)) {\n      return currentUser\n    }\n\n    var ref = this$1.clientProvider.getClientConfig();\n      var scope = ref.scope;\n\n    return currentUser.grant({ scope: scope }).then(function () { return currentUser; })\n  })\n};\n\n/**\n * Signs out the current account from the application and clear session storage.\n *\n * @method GoogleAuthService#logout\n * @see [GoogleAuth.signOut]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthsignout}\n *\n * @return {Promise}\n *\n * @example\n * <script>\n * export default {\n *   name: 'logout-shortcut',\n *\n *   methods: {\n *     login() {\n *       this.$gapi.logout()\n *     },\n *   },\n * }\n * </script>\n */\nGoogleAuthService.prototype.logout = function logout () {\n    var this$1 = this;\n\n  return this.getAuthInstance()\n    .then(function (authInstance) { return authInstance.signOut(); })\n    .then(function () { return this$1.sessionStorage.clear(); })\n};\n\n/**\n * Determines if the user is signed in via local storage.\n *\n * @method GoogleAuthService#isAuthenticated\n * @since 0.0.10\n * @return {boolean}\n *\n * @example\n * <script>\n * export default {\n *   name: 'login-shortcut-check',\n *\n *   methods: {\n *     login() {\n *       if (this.$gapi.isAuthenticated() !== true) {\n *         this.$gapi.login()\n *       }\n *     },\n *   },\n * }\n * </script>\n */\nGoogleAuthService.prototype.isAuthenticated = function isAuthenticated () {\n  return new Date().getTime() < this.sessionStorage.getItem('expiresAt')\n};\n\n/**\n * Determines if the user is signed in via Google.\n *\n * @method GoogleAuthService#isSignedIn\n * @see [GoogleUser.isSignedIn]{@link https://developers.google.com/identity/sign-in/web/reference#googleuserissignedin}\n * @since 0.0.10\n *\n * @return {Promise<boolean>}\n */\nGoogleAuthService.prototype.isSignedIn = function isSignedIn () {\n  return this.getCurrentUser().then(function (currentUser) { return currentUser.isSignedIn(); })\n};\n\n/**\n * Accept the callback to be notified when the authentication status changes.\n *\n * @method GoogleAuthService#listenUserSignIn\n * @see [GoogleAuth.isSignedIn.listen]{@link https://developers.google.com/identity/sign-in/web/reference#googleauthissignedinlistenlistener}\n * @since 0.0.10\n *\n * @param {function} callback\n * the callback function to be notified of an authentication status change\n *\n * @return {Promise<void>}\n */\nGoogleAuthService.prototype.listenUserSignIn = function listenUserSignIn (callback) {\n  return this.getAuthInstance().then(function (authInstance) {\n    callback(authInstance.currentUser.get().isSignedIn());\n    authInstance.isSignedIn.listen(callback);\n  })\n};\n\n/**\n * @typedef {object} GoogleAuthService#UserData\n *\n * @see [gapi.auth2.AuthResponse]{@link https://developers.google.com/identity/sign-in/web/reference#gapiauth2authresponse}\n * @see [GoogleUser.getBasicProfile]{@link https://developers.google.com/identity/sign-in/web/reference#googleusergetbasicprofile}\n *\n * @property {string} id user's unique ID string\n * @property {string} firstName given name\n * @property {string} lastName family name\n * @property {string} fullName full name\n * @property {string} email\n * @property {string} imageUrl\n * @property {number} expiresAt\n * @property {string} accessToken granted access token\n * @property {string} idToken granted ID token\n * @property {string} [offlineAccessCode]\n */\n\n/**\n * Gets the user data from local storage\n *\n * @method GoogleAuthService#getUserData\n * @since 0.0.10\n *\n * @return {GoogleAuthService#UserData|null}\n */\nGoogleAuthService.prototype.getUserData = function getUserData () {\n  return this.sessionStorage.get()\n};\n\nvar LOCAL_STORAGE_KEY = 'gapi.session';\n\nvar SessionStorage = function SessionStorage(localStorage) {\n  if ( localStorage === void 0 ) localStorage = window.localStorage;\n\n  this.localStorage = localStorage;\n};\n\nSessionStorage.prototype.set = function set (session) {\n  this.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(session));\n};\n\nSessionStorage.prototype.setItem = function setItem (key, value) {\n  var session = this.get() || {};\n  session[key] = value;\n  this.set(session);\n};\n\nSessionStorage.prototype.get = function get () {\n  return JSON.parse(this.localStorage.getItem(LOCAL_STORAGE_KEY))\n};\n\nSessionStorage.prototype.getItem = function getItem (key) {\n  var session = this.get() || {};\n\n  return session[key]\n};\n\nSessionStorage.prototype.clear = function clear () {\n  this.localStorage.removeItem(LOCAL_STORAGE_KEY);\n};\n\n/**\n * @class Vue\n */\n\n/** @module vue-gapi */\n\n/**\n * <code>gapi.client.init</code> configuration parameters.\n *\n * @typedef {object} Options\n * @static\n * @see [gapi.client.init]{@link https://github.com/google/google-api-javascript-client/blob/master/docs/reference.md#----gapiclientinitargs--}\n *\n * @property {string} [apiKey] The API Key to use\n * @property {string[]} [discoveryDocs] An array of discovery doc URLs or discovery doc JSON objects\n * @property {string} [clientId] The app's client ID, found and created in the Google Developers Console\n * @property {string} [scope] The scopes to request, as a space-delimited string\n */\n\nvar index = {\n  /**\n   * @param {Vue} Vue Vue constructor\n   * @param {module:vue-gapi.Options} clientConfig VueGapi plugin options\n   * @see [Using a Plugin]{@link https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin}\n   */\n  install: function (Vue, clientConfig) {\n    var clientProvider = new GapiClientProvider(clientConfig);\n    var sessionStorage = new SessionStorage();\n\n    /**\n     * @memberof Vue\n     * @member {GoogleAuthService}\n     *\n     * @example\n     * <script>\n     *   export default {\n     *     name: 'my-component',\n     *\n     *     methods: {\n     *       login() {\n     *         this.$gapi.getGapiClient().then((gapi) => {\n     *           // gapi.sheets.spreadsheet.get(...)\n     *           // ...\n     *         })\n     *       },\n     *     },\n     *   }\n     * </script>\n     */\n    Vue.prototype.$gapi = new GoogleAuthService(clientProvider, sessionStorage);\n  },\n};\n\nvar version = '1.1.0';\n\nexports.default = index;\nexports.version = version;\n"]}]}