{"remainingRequest":"/Users/administrator/Desktop/scheduleOmatic/node_modules/thread-loader/dist/cjs.js!/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js!/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue","mtime":1616951871156},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/thread-loader/dist/cjs.js","mtime":1616809260390},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js","mtime":1616809255971},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js","mtime":1616809260729}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { json2excel } from 'js2excel';\nexport default {\n  name: \"ScheduleView\",\n  props: [\"employeeList\"],\n  methods: {\n    generateSchedule: function generateSchedule(list) {\n      var _this = this;\n\n      this.scheduleObj = [];\n      this.timeObj.departments.forEach(function (dep) {\n        var scheduleObj = {};\n\n        var depart = _this.timeObj.departments.filter(function (department) {\n          return department.name === dep.name;\n        })[0];\n\n        var workers = list.filter(function (person) {\n          return person.employeeDepartment === dep.name;\n        });\n        depart.timeFrames.forEach(function (tf) {\n          scheduleObj[tf.day] = {};\n          workers.forEach(function (wrk) {\n            scheduleObj[tf.day][wrk.employeeName] = {};\n\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName].available = true;\n              var employeeStartTime = wrk.employeeAvailability[tf.day].startTime;\n              var employeeEndTime = wrk.employeeAvailability[tf.day].endTime; // If the employee is available before or at shift open\n\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open;\n                var hoursAvail = employeeEndTime - employeeStartTime;\n                scheduleObj[tf.day][wrk.employeeName].endTime = hoursAvail < 8 ? tf.open + hoursAvail : tf.open + 8 > tf.close ? tf.close : tf.open + 8;\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime;\n\n                var _hoursAvail = employeeEndTime - employeeStartTime;\n\n                scheduleObj[tf.day][wrk.employeeName].endTime = _hoursAvail + employeeStartTime > tf.close ? tf.close : _hoursAvail + employeeStartTime;\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName].available = false;\n            }\n          });\n        });\n\n        _this.translateToTable(scheduleObj, dep.name);\n      });\n    },\n    translateToTable: function translateToTable(obj, department) {\n      var _this2 = this;\n\n      var result = [];\n      obj = this.filterOutPeople(obj, department); // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n\n      var days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\n      this.employeeList.filter(function (e) {\n        return e.employeeDepartment === department;\n      }).forEach(function (employee) {\n        var temp = {};\n        temp[\"name\"] = employee.employeeName;\n        temp[\"department\"] = employee.employeeDepartment;\n        temp[\"totalTimeThisWeek\"] = 0;\n        days.forEach(function (day) {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime;\n            }\n\n            temp[day] = obj[day][employee.employeeName].available ? _this2.doubleToTimeString(obj[day][employee.employeeName].startTime) + \" - \" + _this2.doubleToTimeString(obj[day][employee.employeeName].endTime) : \"Not Available\";\n          }\n        });\n        result.push(temp);\n      });\n      result.forEach(function (res) {\n        _this2.scheduleObj.push(res);\n      });\n    },\n    filterOutPeople: function filterOutPeople(obj, departmentName) {\n      var _this3 = this;\n\n      var timeWorked = {};\n      var middleDayOptions = {};\n\n      var _loop = function _loop(day) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = [];\n          } // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n\n\n          var employeeList = _this3.shuffleArray(_this3.jsonObjectsToArray(obj[day]));\n\n          var department = _this3.timeObj.departments.filter(function (i) {\n            return i.name === departmentName;\n          })[0];\n\n          var timeframe = department.timeFrames.filter(function (i) {\n            return i.day === day;\n          })[0];\n\n          if (employeeList.length > department.requiredEmployeeAtGivenTime) {\n            var hasStartingEmployee, hasClosingEmployee, startingEmployee, closingEmployee;\n            var keepLooping = true;\n\n            while (keepLooping) {\n              var _loop2 = function _loop2(i) {\n                var employee = employeeList[i];\n\n                if (employee.available) {\n                  if (employee.startTime === timeframe.open) {\n                    if (hasStartingEmployee) {\n                      if (timeWorked[startingEmployee.name] >= 20) {\n                        middleDayOptions[day].push(startingEmployee);\n                        employeeList.splice(employeeList.indexOf(startingEmployee), 1);\n                        startingEmployee = employee;\n                      } else {\n                        employeeList.splice(i, 1);\n                      }\n                    }\n\n                    startingEmployee = employee;\n                    hasStartingEmployee = true;\n                  } else if (employee.endTime === timeframe.close) {\n                    if (hasClosingEmployee) {\n                      if (timeWorked[closingEmployee.name] >= 20) {\n                        middleDayOptions[day].push(closingEmployee);\n                        employeeList.splice(employeeList.indexOf(closingEmployee), 1);\n                        closingEmployee = employee;\n                      } else {\n                        employeeList.splice(i, 1);\n                      }\n                    }\n\n                    closingEmployee = employee;\n                    hasClosingEmployee = true;\n                  } else {\n                    // Employee can work, not start or close tho\n                    middleDayOptions[day].push(employee);\n                    employeeList.splice(i, 1);\n                  }\n                }\n\n                if (employeeList.filter(function (e) {\n                  return e.available;\n                }).length <= department.requiredEmployeeAtGivenTime) {\n                  keepLooping = false;\n                  employeeList.forEach(function (employ) {\n                    if (timeWorked[employ.name] === undefined) {\n                      timeWorked[employ.name] = 0;\n                    }\n\n                    timeWorked[employ.name] += employee.endTime - employee.startTime;\n                  });\n                  return \"break\";\n                }\n              };\n\n              for (var i = 0; i < employeeList.length; i++) {\n                var _ret = _loop2(i);\n\n                if (_ret === \"break\") break;\n              }\n            }\n          } else if (employeeList.length < department.requiredEmployeeAtGivenTime) {\n            _this3.sendNotification(\"Warning\", \"warning\", \"Not enough employees available on \".concat(day, \" in \").concat(departmentName));\n          }\n\n          obj[day] = _this3.arrayToJsonObjects(employeeList, day);\n        }\n      };\n\n      for (var day in obj) {\n        _loop(day);\n      }\n\n      this.looseShifts[departmentName] = middleDayOptions;\n      return obj;\n    },\n    arrayToJsonObjects: function arrayToJsonObjects(arr, day) {\n      var result = {};\n      arr.forEach(function (item) {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item;\n      });\n      return result;\n    },\n    jsonObjectsToArray: function jsonObjectsToArray(object) {\n      var result = [];\n\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key;\n          result.push(object[key]);\n        }\n      }\n\n      return result;\n    },\n    doubleToTimeString: function doubleToTimeString(str) {\n      var val = parseFloat(str);\n\n      if (val > 12) {\n        val = val - 12;\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" PM\");\n      } else {\n        return \"\".concat(Math.floor(val), \":\").concat(this.getMinutesFromDouble(val - Math.floor(val)), \" AM\");\n      }\n    },\n    shuffleArray: function shuffleArray(array) {\n      var copy = Array.from(array);\n\n      for (var i = copy.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n\n      return copy;\n    },\n    getMinutesFromDouble: function getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\";\n\n        case 0.5:\n          return \"30\";\n\n        case 0.75:\n          return \"45\";\n\n        default:\n          return \"00\";\n      }\n    },\n    saveToExcel: function saveToExcel() {\n      try {\n        json2excel({\n          data: this.scheduleObj,\n          name: \"Schedule\",\n          formateDate: 'yyyy/mm/dd'\n        });\n      } catch (e) {\n        console.error('export error');\n      }\n    }\n  },\n  data: function data() {\n    return {\n      looseShifts: {},\n      scheduleObj: [],\n      scheduleHeaders: [{\n        text: 'Employee Name',\n        align: 'start',\n        value: 'name'\n      }, {\n        text: 'Total Hours',\n        value: 'totalTimeThisWeek'\n      }, {\n        text: 'Sunday',\n        value: 'sunday'\n      }, {\n        text: 'Monday',\n        value: 'monday'\n      }, {\n        text: 'Tuesday',\n        value: 'tuesday'\n      }, {\n        text: 'Wednesday',\n        value: 'wednesday'\n      }, {\n        text: 'Thursday',\n        value: 'thursday'\n      }, {\n        text: 'Friday',\n        value: 'friday'\n      }, {\n        text: 'Saturday',\n        value: 'saturday'\n      }],\n      timeObj: {\n        departments: [{\n          name: \"Post Office\",\n          requiredEmployeeAtGivenTime: 2,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"monday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"tuesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"wednesday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"thursday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"friday\",\n            open: 9,\n            close: 21.5\n          }, {\n            day: \"saturday\",\n            open: 9,\n            close: 17.5\n          }]\n        }, {\n          name: \"Cashier\",\n          requiredEmployeeAtGivenTime: 2,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"monday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"tuesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"wednesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"thursday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"friday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"saturday\",\n            open: 10.5,\n            close: 17\n          }]\n        }, {\n          name: \"Customer Service\",\n          requiredEmployeeAtGivenTime: 1,\n          totalHoursAvailable: 83.5,\n          timeFrames: [{\n            day: \"sunday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"monday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"tuesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"wednesday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"thursday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"friday\",\n            open: 10.5,\n            close: 21\n          }, {\n            day: \"saturday\",\n            open: 10.5,\n            close: 17\n          }]\n        }]\n      }\n    };\n  }\n};",{"version":3,"sources":["ScheduleView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-expansion-panels style=\"width: 80%; margin: 10px auto\" accordion>\n    <v-expansion-panel\n        v-for=\"(item,i) in 1\"\n        :key=\"i\"\n    >\n      <v-expansion-panel-header><h1>Schedule View</h1></v-expansion-panel-header>\n      <v-expansion-panel-content>\n        <v-data-table\n            :headers=\"scheduleHeaders\"\n            :items=\"scheduleObj\"\n            dense\n            group-by=\"department\"\n            :items-per-page=\"10\">\n          <template v-slot:group.header=\"{items, isOpen, toggle}\">\n            <th colspan=\"9\" @click=\"toggle\">\n              <v-icon\n              >{{ isOpen ? 'mdi-minus' : 'mdi-plus' }}\n              </v-icon>\n              {{ items[0].department }}\n            </th>\n          </template>\n          <template v-slot:item=\"{ item }\">\n            <tr>\n              <td v-for=\"(header,key) in scheduleHeaders\" :key=\"key\">\n                <v-edit-dialog\n                    :return-value.sync=\"item[header.value]\"\n                    large\n                > {{ item[header.value] }}\n                  <template v-slot:input>\n                    <v-text-field\n                        v-model=\"item[header.value]\"\n                        label=\"Edit\"\n                        single-line\n                    ></v-text-field>\n                  </template>\n                </v-edit-dialog>\n              </td>\n            </tr>\n          </template>\n        </v-data-table>\n        <v-btn\n            color=\"primary\"\n            class=\"mr-4\"\n            style=\"height: 25px\"\n            @click=\"saveToExcel\"\n        >\n          Download Excel\n        </v-btn>\n      </v-expansion-panel-content>\n    </v-expansion-panel>\n  </v-expansion-panels>\n</template>\n\n<script>\nimport { json2excel } from 'js2excel';\n\nexport default {\n  name: \"ScheduleView\",\n  props: [\n    \"employeeList\"\n  ],\n  methods: {\n    generateSchedule(list) {\n      this.scheduleObj = []\n      this.timeObj.departments.forEach(dep => {\n        let scheduleObj = {}\n\n        let depart = this.timeObj.departments.filter(department => department.name === dep.name)[0]\n        let workers = list.filter(person => person.employeeDepartment === dep.name)\n        depart.timeFrames.forEach(tf => {\n          scheduleObj[tf.day] = {}\n          workers.forEach(wrk => {\n            scheduleObj[tf.day][wrk.employeeName] = {}\n\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName].available = true\n              let employeeStartTime = wrk.employeeAvailability[tf.day].startTime\n              let employeeEndTime = wrk.employeeAvailability[tf.day].endTime\n              // If the employee is available before or at shift open\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open\n                let hoursAvail = employeeEndTime - employeeStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = (\n                    hoursAvail < 8\n                ) ? tf.open + hoursAvail : ((tf.open + 8) > tf.close) ? tf.close : tf.open + 8\n\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime\n                let hoursAvail = employeeEndTime - employeeStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = ((hoursAvail + employeeStartTime) > tf.close) ? tf.close :\n                    (hoursAvail + employeeStartTime)\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName].available = false\n            }\n          })\n        })\n        this.translateToTable(scheduleObj, dep.name)\n      })\n    },\n    translateToTable(obj, department) {\n      let result = []\n      obj = this.filterOutPeople(obj, department)\n      // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n      let days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n      this.employeeList.filter(e => e.employeeDepartment === department).forEach(employee => {\n        let temp = {}\n        temp[\"name\"] = employee.employeeName\n        temp[\"department\"] = employee.employeeDepartment\n        temp[\"totalTimeThisWeek\"] = 0\n        days.forEach(day => {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime\n            }\n            temp[day] = (obj[day][employee.employeeName].available) ?\n                this.doubleToTimeString(obj[day][employee.employeeName].startTime) +\n                \" - \" + this.doubleToTimeString(obj[day][employee.employeeName].endTime)\n                : \"Not Available\"\n          }\n        })\n        result.push(temp)\n      })\n      result.forEach(res => {\n        this.scheduleObj.push(res)\n      })\n    },\n    filterOutPeople(obj, departmentName) {\n      let timeWorked = {}\n      let middleDayOptions = {}\n      for (let day in obj) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = []\n          }\n          // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n          let employeeList = this.shuffleArray(this.jsonObjectsToArray(obj[day]))\n          let department = this.timeObj.departments.filter(i => i.name === departmentName)[0]\n          let timeframe = department.timeFrames.filter(i => i.day === day)[0]\n\n          if (employeeList.length > department.requiredEmployeeAtGivenTime) {\n            let hasStartingEmployee, hasClosingEmployee, startingEmployee, closingEmployee\n            let keepLooping = true\n            while (keepLooping) {\n              for (let i = 0; i < employeeList.length; i++) {\n                let employee = employeeList[i]\n                if (employee.available) {\n                  if (employee.startTime === timeframe.open) {\n                    if (hasStartingEmployee) {\n                      if (timeWorked[startingEmployee.name] >= 20) {\n                        middleDayOptions[day].push(startingEmployee)\n                        employeeList.splice(employeeList.indexOf(startingEmployee), 1)\n                        startingEmployee = employee\n                      } else {\n                        employeeList.splice(i, 1)\n                      }\n                    }\n                    startingEmployee = employee\n                    hasStartingEmployee = true\n                  } else if (employee.endTime === timeframe.close) {\n                    if (hasClosingEmployee) {\n                      if (timeWorked[closingEmployee.name] >= 20) {\n                        middleDayOptions[day].push(closingEmployee)\n                        employeeList.splice(employeeList.indexOf(closingEmployee), 1)\n                        closingEmployee = employee\n                      } else {\n                        employeeList.splice(i, 1)\n                      }\n                    }\n                    closingEmployee = employee\n                    hasClosingEmployee = true\n                  } else {\n                    // Employee can work, not start or close tho\n                    middleDayOptions[day].push(employee)\n                    employeeList.splice(i, 1)\n                  }\n                }\n                if (employeeList.filter(e => e.available).length <= department.requiredEmployeeAtGivenTime) {\n                  keepLooping = false\n                  employeeList.forEach(employ => {\n                    if (timeWorked[employ.name] === undefined) {\n                      timeWorked[employ.name] = 0\n                    }\n                    timeWorked[employ.name] += employee.endTime - employee.startTime\n                  })\n                  break\n                }\n              }\n            }\n          } else if (employeeList.length < department.requiredEmployeeAtGivenTime) {\n            this.sendNotification(\"Warning\", \"warning\", `Not enough employees available on ${day} in ${departmentName}`)\n          }\n\n          obj[day] = this.arrayToJsonObjects(employeeList, day)\n        }\n      }\n      this.looseShifts[departmentName] = middleDayOptions\n      return obj\n    },\n    arrayToJsonObjects(arr, day) {\n      let result = {}\n      arr.forEach(item => {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item\n      })\n      return result\n    },\n    jsonObjectsToArray(object) {\n      let result = []\n      for (let key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key\n          result.push(object[key])\n        }\n      }\n      return result\n    },\n    doubleToTimeString(str) {\n      let val = parseFloat(str)\n      if (val > 12) {\n        val = val - 12\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} PM`\n      } else {\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} AM`\n      }\n    },\n    shuffleArray(array) {\n      let copy = Array.from(array)\n      for (let i = copy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n      return copy\n    },\n    getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\"\n        case 0.5:\n          return \"30\"\n        case 0.75:\n          return \"45\"\n        default:\n          return \"00\"\n      }\n    },\n    saveToExcel() {\n      try {\n        json2excel({\n          data: this.scheduleObj,\n          name: `Schedule`,\n          formateDate: 'yyyy/mm/dd'\n        });\n      } catch (e) {\n        console.error('export error');\n      }\n    }\n  },\n  data() {\n    return {\n      looseShifts: {},\n      scheduleObj: [],\n      scheduleHeaders: [\n        {text: 'Employee Name', align: 'start', value: 'name'},\n        {text: 'Total Hours', value: 'totalTimeThisWeek'},\n        {text: 'Sunday', value: 'sunday'},\n        {text: 'Monday', value: 'monday'},\n        {text: 'Tuesday', value: 'tuesday'},\n        {text: 'Wednesday', value: 'wednesday'},\n        {text: 'Thursday', value: 'thursday'},\n        {text: 'Friday', value: 'friday'},\n        {text: 'Saturday', value: 'saturday'}\n      ],\n      timeObj: {\n        departments: [\n          {\n            name: \"Post Office\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 9, close: 21.5},\n              {day: \"monday\", open: 9, close: 21.5},\n              {day: \"tuesday\", open: 9, close: 21.5},\n              {day: \"wednesday\", open: 9, close: 21.5},\n              {day: \"thursday\", open: 9, close: 21.5},\n              {day: \"friday\", open: 9, close: 21.5},\n              {day: \"saturday\", open: 9, close: 17.5}\n            ]\n          },\n          {\n            name: \"Cashier\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          },\n          {\n            name: \"Customer Service\", requiredEmployeeAtGivenTime: 1, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components"}]}