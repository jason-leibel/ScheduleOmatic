{"remainingRequest":"/Users/jason/Desktop/vue-google-oauth2-front-sample/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jason/Desktop/vue-google-oauth2-front-sample/src/components/AddPidFilter.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jason/Desktop/vue-google-oauth2-front-sample/src/components/AddPidFilter.vue","mtime":1614712538678},{"path":"/Users/jason/Desktop/vue-google-oauth2-front-sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/vue-google-oauth2-front-sample/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/jason/Desktop/vue-google-oauth2-front-sample/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/vue-google-oauth2-front-sample/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue'\nimport VueGapi from 'vue-gapi'\nimport axios from \"axios\";\nimport VueSimpleSuggest from 'vue-simple-suggest'\nimport 'vue-simple-suggest/dist/styles.css'\n\nVue.use(VueGapi, {\n  apiKey: 'AIzaSyA8aWGNiYwZUY8ArkeHy6V98QkqAJ1f2aA',\n  clientId: '243568982452-6tqtb521vek7929r7uj54lh2tt7i2ol8.apps.googleusercontent.com',\n  discoveryDocs: ['https://gmail.googleapis.com/$discovery/rest?version=v1'],\n  scope: \"https://mail.google.com/ https://www.googleapis.com/auth/gmail.settings.basic\",\n})\n\nexport default {\n  name: \"AddPidFilter\",\n  components: {\n    VueSimpleSuggest\n  },\n  data() {\n    return {\n      labels: [],\n      labelValue: \"TestLabel\",\n      pidValue: \"TEST\",\n      emailListValue: \"jason.leibel@hotmail.com; idavey@gmail.com\",\n      clipboardValue: \"\",\n      authInstance: null\n    }\n  },\n  mounted() {\n    this.$gapi.login().then(data => {\n      this.authInstance = data\n      axios.get(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(data.currentUser.getBasicProfile().getEmail())}/labels`, {\n        headers: {\n          Authorization: `Bearer ${data.currentUser.getAuthResponse().access_token}`,\n          'content-type': 'application/json'\n        }\n      }).then(resp => {\n        // eslint-disable-next-line no-console\n        this.labels = resp.data.labels\n      }).catch(err => {\n        // eslint-disable-next-line no-console\n        console.log(err)\n      })\n    })\n  },\n  methods: {\n    parseClipboard() {\n      const cb = this.clipboardValue\n      const pid = cb.substring(cb.indexOf(\"PID: \") + 5, cb.substring(cb.indexOf(\"PID: \") + 5, cb.length).indexOf(\" \"))\n      const email = cb.substring(cb.indexOf(\"Email: \") + 7, cb.substring(cb.indexOf(\"Email: \") + 7, cb.length).indexOf(\" \"))\n      debugger\n    },\n    generateUniqueID() {\n      // always start with a letter (for DOM friendlyness)\n      var idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n      do {\n        // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n        var ascicode = Math.floor((Math.random() * 42) + 48);\n        if (ascicode < 58 || ascicode > 64) {\n          // exclude all chars between : (58) and @ (64)\n          idstr += String.fromCharCode(ascicode);\n        }\n      } while (idstr.length < 32);\n\n      return (idstr);\n    },\n    async addPidFilter() {\n      if (!this.isRealLabel || this.labelValue === '' || this.pidValue === '') {\n        alert(\"Important: please fix the errors before trying to create the filters\")\n      }\n      if (!this.authInstance) {\n        alert(\"Doesnt appear you are logged in, perhaps refreshing will fix?\")\n      }\n      const label = this.fetchLabelobject()\n      const criteria = []\n\n      criteria.push({\n        \"query\": `${this.pidValue}`\n      })\n      if (this.emailListValue !== \"\") {\n        this.emailListValue.split('; ').forEach(email => {\n          criteria.push({\n            \"to\": `${email}`\n          })\n          criteria.push({\n            \"from\": `${email}`\n          })\n        })\n      }\n\n      for (let i = 0; i < criteria.length; i++) {\n        await this.createFilter(label, criteria[i])\n      }\n    },\n    fetchLabelobject() {\n      let obj = {}\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          obj = label\n        }\n      })\n      return obj\n    },\n    async createFilter(label, criteria) {\n      return axios.post(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail())}/settings/filters`,\n          {\n            \"id\": this.generateUniqueID().toString(),\n            criteria,\n            \"action\": {\n              \"addLabelIds\": [\n                `${label.id}`\n              ]\n            }\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.authInstance.currentUser.getAuthResponse().access_token}`,\n              'content-type': 'application/json'\n            }\n          }).then(() => {\n        this.$notify({\n          group: 'app',\n          title: 'Success!',\n          type: 'success',\n          duration: 4000,\n          text: `Filter created for the following criteria: ${JSON.stringify(criteria)}`\n        });\n      }).catch(err => {\n        this.$notify({\n          group: 'app',\n          title: `Error code: ${err.response.data.error.code}`,\n          type: 'error',\n          duration: 4000,\n          text: `Message: ${err.response.data.error.message} >>> for filter criteria: ${JSON.stringify(criteria)}`\n        });\n      })\n    }\n  },\n  computed: {\n    labelList() {\n      return this.labels.map(i => i.name)\n    },\n    isRealLabel() {\n      let exists = false\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          exists = true\n        }\n      })\n\n      return exists\n    }\n  }\n}\n",{"version":3,"sources":["AddPidFilter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AddPidFilter.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <h1>Add PID Filter</h1>\n\n    <label for=\"clipboard\" class=\"AddPidFilter__label\">Paste full PID from Slack:</label>\n    <textarea id=\"clipboard\"\n              name=\"clipboard\"\n              v-model=\"clipboardValue\"\n              class=\"AddPidFilter__input\"\n              placeholder=\"Paste a pid that was sent from slack so we can try to parse it, NOTE: this field is optional and may not work\"/>\n    <button style=\"display: block\" @click=\"parseClipboard\">Attempt to parse!</button>\n\n    <label for=\"label\" class=\"AddPidFilter__label\">GMail Label:</label>\n    <vue-simple-suggest\n        id=\"label\"\n        name=\"label\"\n        v-model=\"labelValue\"\n        class=\"AddPidFilter__input-select\"\n        :list=\"labelList\"\n        :max-suggestions=\"0\"\n        :filter-by-query=\"true\">\n      <!-- Filter by input text to only show the matching results -->\n    </vue-simple-suggest>\n    <span v-show=\"labelValue === ''\" class=\"AddPidFilter__error\">* Select or enter a Gmail label for the filter to be applied to.</span>\n    <span v-show=\"!isRealLabel\" class=\"AddPidFilter__error\">* Invalid label selected/entered.</span>\n    <label for=\"pid\" class=\"AddPidFilter__label\">PID:</label>\n    <input id=\"pid\"\n           name=\"pid\"\n           v-model=\"pidValue\"\n           class=\"AddPidFilter__input\"\n           type=\"text\" placeholder=\"ABCD\"/>\n    <span v-show=\"pidValue === ''\" class=\"AddPidFilter__error\">* Must provide PID letters.</span>\n    <label for=\"emailList\" class=\"AddPidFilter__label\">Email List (if you want multiple emails seperate them using a\n      semi-color and space i.e \"; \"):</label>\n    <input id=\"emailList\"\n           name=\"emailList\"\n           v-model=\"emailListValue\"\n           class=\"AddPidFilter__input\"\n           type=\"text\" placeholder=\"email@gmail.com; email2@gmail.com\"/>\n\n    <button @click=\"addPidFilter\">Add PID Filters!</button>\n  </div>\n</template>\n\n<script lang=\"js\">\nimport Vue from 'vue'\nimport VueGapi from 'vue-gapi'\nimport axios from \"axios\";\nimport VueSimpleSuggest from 'vue-simple-suggest'\nimport 'vue-simple-suggest/dist/styles.css'\n\nVue.use(VueGapi, {\n  apiKey: 'AIzaSyA8aWGNiYwZUY8ArkeHy6V98QkqAJ1f2aA',\n  clientId: '243568982452-6tqtb521vek7929r7uj54lh2tt7i2ol8.apps.googleusercontent.com',\n  discoveryDocs: ['https://gmail.googleapis.com/$discovery/rest?version=v1'],\n  scope: \"https://mail.google.com/ https://www.googleapis.com/auth/gmail.settings.basic\",\n})\n\nexport default {\n  name: \"AddPidFilter\",\n  components: {\n    VueSimpleSuggest\n  },\n  data() {\n    return {\n      labels: [],\n      labelValue: \"TestLabel\",\n      pidValue: \"TEST\",\n      emailListValue: \"jason.leibel@hotmail.com; idavey@gmail.com\",\n      clipboardValue: \"\",\n      authInstance: null\n    }\n  },\n  mounted() {\n    this.$gapi.login().then(data => {\n      this.authInstance = data\n      axios.get(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(data.currentUser.getBasicProfile().getEmail())}/labels`, {\n        headers: {\n          Authorization: `Bearer ${data.currentUser.getAuthResponse().access_token}`,\n          'content-type': 'application/json'\n        }\n      }).then(resp => {\n        // eslint-disable-next-line no-console\n        this.labels = resp.data.labels\n      }).catch(err => {\n        // eslint-disable-next-line no-console\n        console.log(err)\n      })\n    })\n  },\n  methods: {\n    parseClipboard() {\n      const cb = this.clipboardValue\n      const pid = cb.substring(cb.indexOf(\"PID: \") + 5, cb.substring(cb.indexOf(\"PID: \") + 5, cb.length).indexOf(\" \"))\n      const email = cb.substring(cb.indexOf(\"Email: \") + 7, cb.substring(cb.indexOf(\"Email: \") + 7, cb.length).indexOf(\" \"))\n      debugger\n    },\n    generateUniqueID() {\n      // always start with a letter (for DOM friendlyness)\n      var idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n      do {\n        // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n        var ascicode = Math.floor((Math.random() * 42) + 48);\n        if (ascicode < 58 || ascicode > 64) {\n          // exclude all chars between : (58) and @ (64)\n          idstr += String.fromCharCode(ascicode);\n        }\n      } while (idstr.length < 32);\n\n      return (idstr);\n    },\n    async addPidFilter() {\n      if (!this.isRealLabel || this.labelValue === '' || this.pidValue === '') {\n        alert(\"Important: please fix the errors before trying to create the filters\")\n      }\n      if (!this.authInstance) {\n        alert(\"Doesnt appear you are logged in, perhaps refreshing will fix?\")\n      }\n      const label = this.fetchLabelobject()\n      const criteria = []\n\n      criteria.push({\n        \"query\": `${this.pidValue}`\n      })\n      if (this.emailListValue !== \"\") {\n        this.emailListValue.split('; ').forEach(email => {\n          criteria.push({\n            \"to\": `${email}`\n          })\n          criteria.push({\n            \"from\": `${email}`\n          })\n        })\n      }\n\n      for (let i = 0; i < criteria.length; i++) {\n        await this.createFilter(label, criteria[i])\n      }\n    },\n    fetchLabelobject() {\n      let obj = {}\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          obj = label\n        }\n      })\n      return obj\n    },\n    async createFilter(label, criteria) {\n      return axios.post(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail())}/settings/filters`,\n          {\n            \"id\": this.generateUniqueID().toString(),\n            criteria,\n            \"action\": {\n              \"addLabelIds\": [\n                `${label.id}`\n              ]\n            }\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.authInstance.currentUser.getAuthResponse().access_token}`,\n              'content-type': 'application/json'\n            }\n          }).then(() => {\n        this.$notify({\n          group: 'app',\n          title: 'Success!',\n          type: 'success',\n          duration: 4000,\n          text: `Filter created for the following criteria: ${JSON.stringify(criteria)}`\n        });\n      }).catch(err => {\n        this.$notify({\n          group: 'app',\n          title: `Error code: ${err.response.data.error.code}`,\n          type: 'error',\n          duration: 4000,\n          text: `Message: ${err.response.data.error.message} >>> for filter criteria: ${JSON.stringify(criteria)}`\n        });\n      })\n    }\n  },\n  computed: {\n    labelList() {\n      return this.labels.map(i => i.name)\n    },\n    isRealLabel() {\n      let exists = false\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          exists = true\n        }\n      })\n\n      return exists\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.AddPidFilter__input-select {\n  width: 20%;\n}\n\nbutton {\n  margin-top: 0.5rem;\n}\n\n.AddPidFilter__error {\n  color: red;\n  display: block;\n}\n\n.AddPidFilter__input {\n  width: 20%;\n  display: block;\n  padding: 10px;\n  border: 1px solid #cde;\n  border-radius: 3px;\n  color: black;\n  background: white;\n  outline: none;\n}\n</style>\n"]}]}