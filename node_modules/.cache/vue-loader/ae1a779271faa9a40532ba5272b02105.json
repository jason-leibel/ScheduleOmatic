{"remainingRequest":"/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/administrator/Desktop/scheduleOmatic/src/components/ScheduleView.vue","mtime":1616919959973},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/babel-loader/lib/index.js","mtime":1616809255971},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/administrator/Desktop/scheduleOmatic/node_modules/vue-loader/lib/index.js","mtime":1616809260729}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"ScheduleView\",\n  props: [\n    \"employeeList\"\n  ],\n  methods: {\n    generateSchedule(list) {\n      this.scheduleObj = []\n\n      this.timeObj.departments.forEach(dep => {\n        let scheduleObj = {}\n\n        let depart = this.timeObj.departments.filter(department => department.name === dep.name)[0]\n        let workers = list.filter(person => person.employeeDepartment === dep.name)\n        depart.timeFrames.forEach(tf => {\n          scheduleObj[tf.day] = {}\n          workers.forEach(wrk => {\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = true\n              let empStartTime = wrk.employeeAvailability[tf.day].startTime\n              let empEndTime = wrk.employeeAvailability[tf.day].endTime\n              // If the employee is available before or at shift open\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = (\n                    hoursAvail < 8\n                ) ? tf.open + hoursAvail : ((tf.open + 8) > tf.close) ? tf.close : tf.open + 8\n\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = ((hoursAvail + empStartTime) > tf.close) ? tf.close :\n                    (hoursAvail + empStartTime)\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = false\n            }\n          })\n        })\n        this.translateToTable(scheduleObj, dep.name)\n      })\n    },\n    translateToTable(obj, department) {\n      let result = []\n      obj = this.filterOutPeople(obj, department)\n      // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n      let days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n      this.employeeList.filter(e => e.employeeDepartment === department).forEach(employee => {\n        let temp = {}\n        temp[\"name\"] = employee.employeeName\n        temp[\"department\"] = employee.employeeDepartment\n        temp[\"totalTimeThisWeek\"] = 0\n        days.forEach(day => {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime\n            }\n            temp[day] = (obj[day][employee.employeeName].available) ?\n                this.doubleToTimeString(obj[day][employee.employeeName].startTime) +\n                \" - \" + this.doubleToTimeString(obj[day][employee.employeeName].endTime)\n                : \"Not Available\"\n          }\n        })\n        result.push(temp)\n      })\n      result.forEach(res => {\n        this.scheduleObj.push(res)\n      })\n    },\n    filterOutPeople(obj, department) {\n      let timeWorked = {}\n      let middleDayOptions = {}\n      for (let day in obj) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = []\n          }\n          // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n          let employees = this.shuffleArray(this.jsonObjectsToArray(obj[day]))\n          let depConst = this.timeObj.departments.filter(i => i.name === department)[0]\n          let timeConst = depConst.timeFrames.filter(i => i.day === day)[0]\n\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            let hasStartingEmployee = false\n            let hasClosingEmployee = false\n            let startingEmployee = null\n            let closingEmployee = null\n            let keepLooping = true\n            while (keepLooping) {\n              for (let i = 0; i < employees.length; i++) {\n                let employee = employees[i]\n                if (employee.available) {\n                  if (employee.startTime === timeConst.open) {\n                    if (hasStartingEmployee) {\n                      if (timeWorked[startingEmployee.name] >= this.employeeList.filter(e => e.employeeName === startingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(startingEmployee)\n                        employees.splice(employees.indexOf(startingEmployee), 1)\n                        startingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    startingEmployee = employee\n                    hasStartingEmployee = true\n                  } else if (employee.endTime === timeConst.close) {\n                    if (hasClosingEmployee) {\n                      if (timeWorked[closingEmployee.name] >= this.employeeList.filter(e => e.employeeName === closingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(closingEmployee)\n                        employees.splice(employees.indexOf(closingEmployee), 1)\n                        closingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    closingEmployee = employee\n                    hasClosingEmployee = true\n                  } else {\n                    // Employee can work, not start or close tho\n                    middleDayOptions[day].push(employee)\n                    employees.splice(i, 1)\n                  }\n                }\n                if (employees.filter(e => e.available).length <= depConst.requiredEmployeeAtGivenTime) {\n                  keepLooping = false\n                  employees.forEach(employ => {\n                    if (timeWorked[employ.name] === undefined) {\n                      timeWorked[employ.name] = 0\n                    }\n                    timeWorked[employ.name] += employee.endTime - employee.startTime\n                  })\n                  break\n                }\n              }\n            }\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            this.sendNotification(\"Warning\", \"warning\", `Not enough employees available on ${day} in ${department}`)\n          }\n\n          obj[day] = this.arrayToJsonObjects(employees, day)\n        }\n      }\n      console.log(middleDayOptions)\n      return obj\n    },\n    arrayToJsonObjects(arr, day) {\n      let result = {}\n      arr.forEach(item => {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item\n      })\n      return result\n    },\n    jsonObjectsToArray(object) {\n      let result = []\n      for (let key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key\n          result.push(object[key])\n        }\n      }\n      return result\n    },\n    doubleToTimeString(str) {\n      let val = parseFloat(str)\n      if (val > 12) {\n        val = val - 12\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} PM`\n      } else {\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} AM`\n      }\n    },\n    shuffleArray(array) {\n      let copy = Array.from(array)\n      for (let i = copy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n      return copy\n    },\n    getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\"\n        case 0.5:\n          return \"30\"\n        case 0.75:\n          return \"45\"\n        default:\n          return \"00\"\n      }\n    }\n  },\n  data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [\n        {text: 'Employee Name', align: 'start', value: 'name'},\n        {text: 'Total Hours', value: 'totalTimeThisWeek'},\n        {text: 'Sunday', value: 'sunday'},\n        {text: 'Monday', value: 'monday'},\n        {text: 'Tuesday', value: 'tuesday'},\n        {text: 'Wednesday', value: 'wednesday'},\n        {text: 'Thursday', value: 'thursday'},\n        {text: 'Friday', value: 'friday'},\n        {text: 'Saturday', value: 'saturday'}\n      ],\n      timeObj: {\n        departments: [\n          {\n            name: \"Post Office\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 9, close: 21.5},\n              {day: \"monday\", open: 9, close: 21.5},\n              {day: \"tuesday\", open: 9, close: 21.5},\n              {day: \"wednesday\", open: 9, close: 21.5},\n              {day: \"thursday\", open: 9, close: 21.5},\n              {day: \"friday\", open: 9, close: 21.5},\n              {day: \"saturday\", open: 9, close: 17.5}\n            ]\n          },\n          {\n            name: \"Automotive Parts\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          },\n          {\n            name: \"Customer Service\", requiredEmployeeAtGivenTime: 1, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n",{"version":3,"sources":["ScheduleView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScheduleView.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-expansion-panels style=\"width: 80%; margin: 10px auto\" accordion>\n    <v-expansion-panel\n        v-for=\"(item,i) in 1\"\n        :key=\"i\"\n    >\n      <v-expansion-panel-header><h1>Schedule View</h1></v-expansion-panel-header>\n      <v-expansion-panel-content>\n        <v-data-table\n            :headers=\"scheduleHeaders\"\n            :items=\"scheduleObj\"\n            dense\n            group-by=\"department\"\n            :items-per-page=\"10\">\n          <template v-slot:group.header=\"{items, isOpen, toggle}\">\n            <th colspan=\"9\" @click=\"toggle\">\n              <v-icon\n              >{{ isOpen ? 'mdi-minus' : 'mdi-plus' }}\n              </v-icon>\n              {{ items[0].department }}\n            </th>\n          </template>\n          <template v-slot:item=\"{ item }\">\n            <tr>\n              <td v-for=\"(header,key) in scheduleHeaders\" :key=\"key\">\n                <v-edit-dialog\n                    :return-value.sync=\"item[header.value]\"\n                    large\n                > {{ item[header.value] }}\n                  <template v-slot:input>\n                    <v-text-field\n                        v-model=\"item[header.value]\"\n                        label=\"Edit\"\n                        single-line\n                    ></v-text-field>\n                  </template>\n                </v-edit-dialog>\n              </td>\n            </tr>\n          </template>\n        </v-data-table>\n      </v-expansion-panel-content>\n    </v-expansion-panel>\n  </v-expansion-panels>\n</template>\n\n<script>\nexport default {\n  name: \"ScheduleView\",\n  props: [\n    \"employeeList\"\n  ],\n  methods: {\n    generateSchedule(list) {\n      this.scheduleObj = []\n\n      this.timeObj.departments.forEach(dep => {\n        let scheduleObj = {}\n\n        let depart = this.timeObj.departments.filter(department => department.name === dep.name)[0]\n        let workers = list.filter(person => person.employeeDepartment === dep.name)\n        depart.timeFrames.forEach(tf => {\n          scheduleObj[tf.day] = {}\n          workers.forEach(wrk => {\n            if (wrk.employeeAvailability[tf.day] !== undefined) {\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = true\n              let empStartTime = wrk.employeeAvailability[tf.day].startTime\n              let empEndTime = wrk.employeeAvailability[tf.day].endTime\n              // If the employee is available before or at shift open\n              if (wrk.employeeAvailability[tf.day].startTime <= tf.open) {\n                // schedule employee to work from open eiter until 8 hours or they become unavailable\n                scheduleObj[tf.day][wrk.employeeName].startTime = tf.open\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = (\n                    hoursAvail < 8\n                ) ? tf.open + hoursAvail : ((tf.open + 8) > tf.close) ? tf.close : tf.open + 8\n\n              } else {\n                // schedule employee to work from their time available either until close or 8 hours later\n                scheduleObj[tf.day][wrk.employeeName].startTime = wrk.employeeAvailability[tf.day].startTime\n                let hoursAvail = empEndTime - empStartTime\n                scheduleObj[tf.day][wrk.employeeName].endTime = ((hoursAvail + empStartTime) > tf.close) ? tf.close :\n                    (hoursAvail + empStartTime)\n              }\n            } else {\n              // Employee unavailable that day\n              scheduleObj[tf.day][wrk.employeeName] = {}\n              scheduleObj[tf.day][wrk.employeeName].available = false\n            }\n          })\n        })\n        this.translateToTable(scheduleObj, dep.name)\n      })\n    },\n    translateToTable(obj, department) {\n      let result = []\n      obj = this.filterOutPeople(obj, department)\n      // {friday: { Test User: { available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n      let days = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]\n      this.employeeList.filter(e => e.employeeDepartment === department).forEach(employee => {\n        let temp = {}\n        temp[\"name\"] = employee.employeeName\n        temp[\"department\"] = employee.employeeDepartment\n        temp[\"totalTimeThisWeek\"] = 0\n        days.forEach(day => {\n          if (obj[day][employee.employeeName] !== undefined) {\n            if (obj[day][employee.employeeName].available) {\n              temp[\"totalTimeThisWeek\"] += obj[day][employee.employeeName].endTime - obj[day][employee.employeeName].startTime\n            }\n            temp[day] = (obj[day][employee.employeeName].available) ?\n                this.doubleToTimeString(obj[day][employee.employeeName].startTime) +\n                \" - \" + this.doubleToTimeString(obj[day][employee.employeeName].endTime)\n                : \"Not Available\"\n          }\n        })\n        result.push(temp)\n      })\n      result.forEach(res => {\n        this.scheduleObj.push(res)\n      })\n    },\n    filterOutPeople(obj, department) {\n      let timeWorked = {}\n      let middleDayOptions = {}\n      for (let day in obj) {\n        if (obj.hasOwnProperty(day)) {\n          if (middleDayOptions[day] === undefined) {\n            middleDayOptions[day] = []\n          }\n          // { friday: Test User: {available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"}\n          let employees = this.shuffleArray(this.jsonObjectsToArray(obj[day]))\n          let depConst = this.timeObj.departments.filter(i => i.name === department)[0]\n          let timeConst = depConst.timeFrames.filter(i => i.day === day)[0]\n\n          if (employees.length > depConst.requiredEmployeeAtGivenTime) {\n            let hasStartingEmployee = false\n            let hasClosingEmployee = false\n            let startingEmployee = null\n            let closingEmployee = null\n            let keepLooping = true\n            while (keepLooping) {\n              for (let i = 0; i < employees.length; i++) {\n                let employee = employees[i]\n                if (employee.available) {\n                  if (employee.startTime === timeConst.open) {\n                    if (hasStartingEmployee) {\n                      if (timeWorked[startingEmployee.name] >= this.employeeList.filter(e => e.employeeName === startingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(startingEmployee)\n                        employees.splice(employees.indexOf(startingEmployee), 1)\n                        startingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    startingEmployee = employee\n                    hasStartingEmployee = true\n                  } else if (employee.endTime === timeConst.close) {\n                    if (hasClosingEmployee) {\n                      if (timeWorked[closingEmployee.name] >= this.employeeList.filter(e => e.employeeName === closingEmployee.name)[0].employeeHoursToWork) {\n                        middleDayOptions[day].push(closingEmployee)\n                        employees.splice(employees.indexOf(closingEmployee), 1)\n                        closingEmployee = employee\n                      } else {\n                        employees.splice(i, 1)\n                      }\n                    }\n                    closingEmployee = employee\n                    hasClosingEmployee = true\n                  } else {\n                    // Employee can work, not start or close tho\n                    middleDayOptions[day].push(employee)\n                    employees.splice(i, 1)\n                  }\n                }\n                if (employees.filter(e => e.available).length <= depConst.requiredEmployeeAtGivenTime) {\n                  keepLooping = false\n                  employees.forEach(employ => {\n                    if (timeWorked[employ.name] === undefined) {\n                      timeWorked[employ.name] = 0\n                    }\n                    timeWorked[employ.name] += employee.endTime - employee.startTime\n                  })\n                  break\n                }\n              }\n            }\n          } else if (employees.length < depConst.requiredEmployeeAtGivenTime) {\n            this.sendNotification(\"Warning\", \"warning\", `Not enough employees available on ${day} in ${department}`)\n          }\n\n          obj[day] = this.arrayToJsonObjects(employees, day)\n        }\n      }\n      console.log(middleDayOptions)\n      return obj\n    },\n    arrayToJsonObjects(arr, day) {\n      let result = {}\n      arr.forEach(item => {\n        //available: true, startTime: 10.5, endTime: 18.5, name: \"Test User\"\n        result[item.name] = item\n      })\n      return result\n    },\n    jsonObjectsToArray(object) {\n      let result = []\n      for (let key in object) {\n        if (object.hasOwnProperty(key)) {\n          object[key][\"name\"] = key\n          result.push(object[key])\n        }\n      }\n      return result\n    },\n    doubleToTimeString(str) {\n      let val = parseFloat(str)\n      if (val > 12) {\n        val = val - 12\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} PM`\n      } else {\n        return `${Math.floor(val)}:${this.getMinutesFromDouble(val - Math.floor(val))} AM`\n      }\n    },\n    shuffleArray(array) {\n      let copy = Array.from(array)\n      for (let i = copy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        let temp = copy[i];\n        copy[i] = copy[j];\n        copy[j] = temp;\n      }\n      return copy\n    },\n    getMinutesFromDouble(flt) {\n      switch (flt) {\n        case 0.25:\n          return \"15\"\n        case 0.5:\n          return \"30\"\n        case 0.75:\n          return \"45\"\n        default:\n          return \"00\"\n      }\n    }\n  },\n  data() {\n    return {\n      scheduleObj: [],\n      scheduleHeaders: [\n        {text: 'Employee Name', align: 'start', value: 'name'},\n        {text: 'Total Hours', value: 'totalTimeThisWeek'},\n        {text: 'Sunday', value: 'sunday'},\n        {text: 'Monday', value: 'monday'},\n        {text: 'Tuesday', value: 'tuesday'},\n        {text: 'Wednesday', value: 'wednesday'},\n        {text: 'Thursday', value: 'thursday'},\n        {text: 'Friday', value: 'friday'},\n        {text: 'Saturday', value: 'saturday'}\n      ],\n      timeObj: {\n        departments: [\n          {\n            name: \"Post Office\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 9, close: 21.5},\n              {day: \"monday\", open: 9, close: 21.5},\n              {day: \"tuesday\", open: 9, close: 21.5},\n              {day: \"wednesday\", open: 9, close: 21.5},\n              {day: \"thursday\", open: 9, close: 21.5},\n              {day: \"friday\", open: 9, close: 21.5},\n              {day: \"saturday\", open: 9, close: 17.5}\n            ]\n          },\n          {\n            name: \"Automotive Parts\", requiredEmployeeAtGivenTime: 2, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          },\n          {\n            name: \"Customer Service\", requiredEmployeeAtGivenTime: 1, totalHoursAvailable: 83.5,\n            timeFrames: [\n              {day: \"sunday\", open: 10.5, close: 21},\n              {day: \"monday\", open: 10.5, close: 21},\n              {day: \"tuesday\", open: 10.5, close: 21},\n              {day: \"wednesday\", open: 10.5, close: 21},\n              {day: \"thursday\", open: 10.5, close: 21},\n              {day: \"friday\", open: 10.5, close: 21},\n              {day: \"saturday\", open: 10.5, close: 17}\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}