{"remainingRequest":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jason/Desktop/GmailCustomFilterGenerator/src/components/AddPidFilter.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/src/components/AddPidFilter.vue","mtime":1614963989489},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jason/Desktop/GmailCustomFilterGenerator/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.AddPidFilter__error {\n  color: red;\n  display: block;\n}\n\n.AddPidFilter__warning {\n  color: #d0c84c;\n  display: block;\n}\n\n.v-label {\n  right: auto !important;\n  font-size: 20px;\n}\n",{"version":3,"sources":["AddPidFilter.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsZA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"AddPidFilter.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <v-card style=\"width: 70%; padding: 20px; margin-left: auto; margin-right: auto; margin-top: 20px\">\n      <v-form\n          ref=\"form\"\n          lazy-validation\n      >\n        <h1 v-if=\"parseInProcess\" style=\"background-color: #6278ae; color: white\">MUST enter Gmail label for filter with PID: {{ this.parseCurrentPid }}</h1>\n        <label for=\"label\" class=\"AddPidFilter__label\">GMail Label</label>\n        <vue-simple-suggest\n            id=\"label\"\n            name=\"label\"\n            v-model=\"labelValue\"\n            class=\"AddPidFilter__input-select\"\n            :list=\"labelList\"\n            :max-suggestions=\"0\"\n            :filter-by-query=\"true\">\n          <!-- Filter by input text to only show the matching results -->\n        </vue-simple-suggest>\n        <span v-show=\"labelValue === ''\" class=\"AddPidFilter__error\"><img width=\"12px\" height=\"12px\" src=\"../images/error__icon.png\"/> Select or enter a Gmail label for the filter to be applied to.</span>\n        <span v-show=\"!isRealLabel\" class=\"AddPidFilter__warning\"><img width=\"12px\" height=\"12px\" src=\"../images/warning__icon.png\"/> This Label does not exist and will be added if you add this to the list below.<br>\n        Note: if you want to add a sublabel add a slash (ex. \"/\") afterr a pre existing label then type the sublabel name</span>\n        <v-text-field\n            v-if=\"!parseInProcess\"\n            v-model=\"pidValue\"\n            label=\"*PID\"\n            placeholder=\"ABCD\"\n            :required=\"true\"\n        ></v-text-field>\n        <span v-if=\"!parseInProcess\" v-show=\"pidValue === ''\" class=\"AddPidFilter__error\"><img width=\"12px\" height=\"12px\" src=\"../images/error__icon.png\"/> Must provide PID letters.</span>\n\n        <v-text-field\n            v-if=\"!parseInProcess\"\n            v-model=\"emailListValue\"\n            label=\"Email list\"\n            placeholder=\"email@gmail.com; email2@gmail.com\"\n            required\n        ></v-text-field>\n        <div v-if=\"!parseInProcess\" style=\"margin: 0 auto; width: 100%; text-align: center;\">\n          <v-btn\n              v-if=\"false\"\n              x-large\n              color=\"success\"\n              dark\n              style=\"display: block;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"addPidFilter\">Add PID Filters\n          </v-btn>\n\n          <v-btn\n              x-large\n              dark\n              color=\"primary\"\n              style=\"margin: 10px; background-color: #62ae82 !important;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"addToList\">Add filter to List\n          </v-btn>\n          <v-btn\n              x-large\n              dark\n              style=\"margin: 10px; background-color: #ae6265 !important;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"clearList\">Clear Filter List\n          </v-btn>\n          <v-btn\n              x-large\n              dark\n              style=\"margin: 10px; background-color: #6278ae !important;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"downloadFile\">Download (.xml)\n          </v-btn>\n        </div>\n        <div v-else style=\"margin: 0 auto; width: 100%; text-align: center;\">\n          <v-btn\n              x-large\n              dark\n              style=\"margin: 10px; background-color: #ae6265 !important;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"cancelParse\">Cancel\n          </v-btn>\n          <v-btn\n              x-large\n              dark\n              color=\"primary\"\n              style=\"margin: 10px; background-color: #62ae82 !important;\"\n              :disabled=\"!isSignedIn\"\n              @click=\"assignLabelToPid\">Add Label\n          </v-btn>\n        </div>\n      </v-form>\n      <iframe id=\"my_iframe\" style=\"display:none;\"></iframe>\n      <v-spacer/>\n      <v-data-table\n      :headers=\"headers\"\n      :items=\"filterList\"\n      :items-per-page=\"10\"/>\n    </v-card>\n    <v-card style=\"width: 70%; padding: 20px; margin-left: auto; margin-right: auto; margin-top: 20px\">\n      <h1>Parse PID list to create filters</h1>\n      <v-switch\n          v-model=\"userUnderstandsMayNotWork\"\n          label=\"I understand this may not work 100% so I will double check through out labels are correct\"\n          color=\"red\"\n      ></v-switch>\n      <v-textarea :disabled=\"!userUnderstandsMayNotWork\" placeholder=\"try pasting a list of PID filters in here for me to parse\"\n      v-model=\"toBeParsedListValue\"/>\n      <v-btn\n          x-large\n          dark\n          color=\"primary\"\n          style=\"margin: 10px; background-color: #6278ae !important;\"\n          :disabled=\"!isSignedIn\"\n          @click=\"parseAndAddToList\">Parse and Add to list\n      </v-btn>\n    </v-card>\n  </div>\n</template>\n\n<script lang=\"js\">\nimport axios from \"axios\";\nimport VueSimpleSuggest from 'vue-simple-suggest'\nimport 'vue-simple-suggest/dist/styles.css'\n\nexport default {\n  name: \"AddPidFilter\",\n  components: {\n    VueSimpleSuggest\n  },\n  data() {\n    return {\n      labels: [],\n      labelValue: \"\",\n      pidValue: \"\",\n      emailListValue: \"\",\n      parseInProcess: false,\n      parseCurrentPid: null,\n      parsePidLocation: 0,\n      userUnderstandsMayNotWork: false,\n      toBeParsedListValue: '',\n      filterList: [],\n      headers: [\n        { text: 'PID', align: 'start', value: 'pid' },\n        { text: 'Label', value: 'label' },\n        { text: 'Emails', value: 'email' }\n      ]\n    }\n  },\n  props: [\n    \"isSignedIn\",\n    \"authInstance\"\n  ],\n  watch: {\n    authInstance(n) {\n      if (n !== null) {\n        axios.get(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(n.currentUser.getBasicProfile().getEmail())}/labels`, {\n          headers: {\n            Authorization: `Bearer ${n.currentUser.getAuthResponse().access_token}`,\n            'content-type': 'application/json'\n          }\n        }).then(function(resp) {\n          this.labels = resp.data.labels\n        }.bind(this)).catch(err => {\n          console.log(err)\n        })\n      }\n    }\n  },\n  methods: {\n    assignLabelToPid() {\n      if (this.labelValue === \"\") {\n        this.sendNotification(\"Error\", \"error\", \"You must provide a GMail label name\")\n        return\n      }\n      if (!this.isRealLabel) {\n        this.createLabel(this.labelValue)\n      }\n      this.filterList[this.parsePidLocation].label = this.labelValue\n      if (this.parsePidLocation === this.filterList.length - 1) {\n        this.parseInProcess = false\n        this.labelValue = \"\"\n        this.parsePidLocation = 0\n      } else {\n        this.labelValue = \"\"\n        this.parsePidLocation += 1\n        this.parseCurrentPid = this.filterList[this.parsePidLocation].pid\n      }\n\n    },\n    cancelParse() {\n      this.clearList()\n      this.parseInProcess = false\n      this.parseCurrentPid = null\n    },\n    generateUniqueID() {\n      // always start with a letter (for DOM friendlyness)\n      var idstr = String.fromCharCode(Math.floor((Math.random() * 25) + 65));\n      do {\n        // between numbers and characters (48 is 0 and 90 is Z (42-48 = 90)\n        var ascicode = Math.floor((Math.random() * 42) + 48);\n        if (ascicode < 58 || ascicode > 64) {\n          // exclude all chars between : (58) and @ (64)\n          idstr += String.fromCharCode(ascicode);\n        }\n      } while (idstr.length < 32);\n\n      return (idstr);\n    },\n    clearList() {\n      this.filterList = []\n    },\n    addToList() {\n      if(!this.verify()) return;\n      this.filterList.push({\n        label: this.labelValue,\n        pid: this.pidValue,\n        email: this.emailListValue\n      })\n\n      if (!this.isRealLabel) {\n        this.createLabel(this.labelValue)\n      }\n\n      this.labelValue = \"\"\n      this.pidValue = \"\"\n      this.emailListValue = \"\"\n\n    },\n    async addPidFilter() {\n      if(!this.verify()) return;\n      const label = this.fetchLabelobject()\n      const criteria = []\n\n      criteria.push({\n        \"query\": `${this.pidValue}`\n      })\n      if (this.emailListValue !== \"\") {\n        this.emailListValue.split('; ').forEach(email => {\n          criteria.push({\n            \"to\": `${email}`\n          })\n          criteria.push({\n            \"from\": `${email}`\n          })\n        })\n      }\n\n      for (let i = 0; i < criteria.length; i++) {\n        await this.createFilter(label, criteria[i])\n      }\n    },\n    verify() {\n      if (this.labelValue === '' || this.pidValue === '') {\n        this.sendNotification('Form Not Filled out', 'error', 'Please fix errors in red before trying to create?')\n        return false\n      }\n      if (!this.authInstance) {\n        this.sendNotification('Incorrect Login Details', 'error', 'Doesnt appear you are logged in, perhaps refreshing will fix?')\n        return false\n      }\n      return true\n    },\n    fetchLabelobject() {\n      let obj = {}\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          obj = label\n        }\n      })\n      return obj\n    },\n    async createLabel(label) {\n      return axios.post(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail())}/labels`,\n          {\n            \"labelListVisibility\": \"labelShow\",\n            \"messageListVisibility\": \"show\",\n            \"name\": label\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.authInstance.currentUser.getAuthResponse().access_token}`,\n              'content-type': 'application/json'\n            }\n          }).then(() => {\n        this.labels.push({\n          id: this.generateUniqueID(),\n          name: label,\n          label\n        })\n        this.sendNotification('Success!', 'success', `Label created for: ${label}`)\n      }).catch(err => {\n        this.sendNotification(`Error code: ${err.response.data.error.code}`, 'error', `Message: ${err.response.data.error.message} >>> for label: ${label}`)\n      })\n    },\n    async createFilter(label, criteria) {\n      return axios.post(`https://gmail.googleapis.com/gmail/v1/users/${encodeURIComponent(this.authInstance.currentUser.getBasicProfile().getEmail())}/settings/filters`,\n          {\"id\": this.generateUniqueID().toString(), criteria, \"action\": {\"addLabelIds\": [`${label.id}`]}}, {\n            headers: {\n              Authorization: `Bearer ${this.authInstance.currentUser.getAuthResponse().access_token}`,\n              'content-type': 'application/json'\n            }\n          }).then(() => {\n        this.sendNotification('Success!', 'success', `Filter created for the following criteria: ${JSON.stringify(criteria)}`)\n      }).catch(err => {\n        this.sendNotification(`Error code: ${err.response.data.error.code}`, 'error', `Message: ${err.response.data.error.message} >>> for filter criteria: ${JSON.stringify(criteria)}`)\n      })\n    },\n    sendNotification(title, type, text) {\n      console.log(\"Notification\")\n      this.$notify({\n        group: 'app',\n        title,\n        type,\n        duration: 4000,\n        text\n      });\n    },\n    downloadFile() {\n      const fl = this.filterList\n      if (this.filterList.length === 0) {\n        this.sendNotification('Error', 'error', 'Filter list is empty')\n        return\n      }\n\n      const entries = []\n      for (let i = 0; i < fl.length; i++) {\n        entries.push(`<entry><category term=\"filter\"></category><apps:property name='hasTheWord' value='${fl[i].pid}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n        if (fl[i].email !== \"\" && fl[i].email.length !== 0) {\n          fl[i].email.split('; ').forEach(email => {\n            entries.push(`<entry><category term=\"filter\"></category><apps:property name='to' value='${email}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n            entries.push(`<entry><category term=\"filter\"></category><apps:property name='from' value='${email}' />\n                   <apps:property name='label' value='${fl[i].label}'/></entry>`)\n          })\n        }\n      }\n\n      let filename = \"filters.xml\";\n      let pom = document.createElement('a');\n      let bb = new Blob([`<?xml version='1.0' encoding='UTF-8'?>\n<feed xmlns='http://www.w3.org/2005/Atom' xmlns:apps='http://schemas.google.com/apps/2006'>\n${entries.join('')}\n</feed>`], {type: 'text/plain'});\n\n      pom.setAttribute('href', window.URL.createObjectURL(bb));\n      pom.setAttribute('download', filename);\n\n      pom.dataset.downloadurl = ['text/plain', pom.download, pom.href].join(':');\n      pom.draggable = true;\n      pom.classList.add('dragout');\n\n      pom.click();\n      this.sendNotification('Success', 'success', 'File should have been downloaded as XML, please upload this document to your filters and add them or verify they are correct!')\n\n    },\n    parseAndAddToList() {\n      const cp = this.toBeParsedListValue\n      const list = []\n      cp.split(\"PID: \").filter(i => i !== \"\").forEach(partner => {\n        let pid = partner.substring(0, partner.indexOf(\" \")),\n            emails = []\n        if (partner.toLowerCase().includes(\"email\")) {\n          emails = partner.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+)/gi).join(\"; \")\n        }\n        if (pid.includes(\" \")) {\n          pid = pid.substring(0, pid.indexOf(\" \"))\n        } else if (pid.includes(\"\\n\")) {\n          pid = pid.substring(0, pid.indexOf(\"\\n\"))\n        }\n        list.push({\n          label: '',\n          pid,\n          email: emails\n        })\n      })\n      if (list.length === 0) {\n        this.sendNotification(\"Error\", \"error\", \"Nothing will be added to list\")\n        return\n      } else {\n        this.sendNotification(\"Warning\", \"warning\", \"You have parsed the list, now you MUST enter\" +\n            \" a GMail label for each PID. Also please verify the information in the table was parsed correctly\")\n      }\n      this.filterList = list\n      this.parseInProcess = true\n      this.parsePidLocation = 0\n      this.parseCurrentPid = list[0].pid\n    }\n  },\n  computed: {\n    labelList() {\n      return this.labels.map(i => i.name)\n    },\n    isRealLabel() {\n      let exists = false\n      this.labels.forEach(label => {\n        if (label.name === this.labelValue) {\n          exists = true\n        }\n      })\n\n      return exists\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.AddPidFilter__error {\n  color: red;\n  display: block;\n}\n\n.AddPidFilter__warning {\n  color: #d0c84c;\n  display: block;\n}\n\n.v-label {\n  right: auto !important;\n  font-size: 20px;\n}\n</style>\n"]}]}